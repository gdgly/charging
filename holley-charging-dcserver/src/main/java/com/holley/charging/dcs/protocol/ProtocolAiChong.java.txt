package com.holley.charging.dcs.protocol;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.holley.charging.dcs.dao.model.DcsHisYa;
import com.holley.charging.dcs.dao.model.DcsHisYc;
import com.holley.charging.dcs.dao.model.DcsHisYx;
import com.holley.charging.dcs.service.channel.ChannelService;
import com.holley.charging.dcs.service.device.PileService;
import com.holley.common.cache.charging.ChargingCacheUtil;
import com.holley.common.constants.charge.ChargeCurrentTypeEnum;
import com.holley.common.constants.charge.PileStatusEnum;
import com.holley.common.dataobject.PileStatusBean;
import com.holley.common.util.ProtocolUtils;

public class ProtocolAiChong extends BaseProtocol implements IProtocol {

    static Log                      logger            = LogFactory.getLog(ProtocolAiChong.class.getName());

    public static ProtocolAiChong protocolChuangRui = new ProtocolAiChong();

    private final byte              TYPE_M_SP_NA_1    = 1;
    private final byte              TYPE_M_ME_NB_1    = 11;
    private final byte              TYPE_M_IT_NA_1    = 15;
    private final byte              TYPE_M_RE_NA_1    = (byte) 130;
    private final byte              TYPE_M_MD_NA_1    = (byte) 132;
    private final byte              TYPE_M_JC_NA_1    = (byte) 134;
    private final byte              TYPE_C_IC_NA_1    = 100;
    private final byte              TYPE_C_CI_NA_1    = 101;
    private final byte              TYPE_C_CS_NA_1    = 103;
    private final byte              TYPE_C_SD_NA_1    = (byte) 133;

    private final byte              U_T_STARTDT       = 0x07;
    private final byte              U_T_TEST          = 0x43;

    private final int               T0_104            = 20;                                                  // t0：连接建立的超时时间，默认
                                                                                                              // 20 秒；
    private final int               T1_104            = 15;                                                  // t1：发送或测试
                                                                                                              // APDU
                                                                                                              // 的超时时间，默认
                                                                                                              // 15 秒；
    private final int               T2_104            = 10;                                                  // t2：无数据报文确认的超时时间，默认
                                                                                                              // 10 秒；
    private final int               T3_104            = 20;                                                  // t3：长期空闲状态下发送测试帧的超时时间，默认
                                                                                                              // 20 秒
    private final int               T4_heart          = 300;                                                 // 心跳间隔，超过此间隔没收到心跳，重新连接，这里的冗余量比较大
    private final int               K_104_MAX         = 9;                                                   // K:发送方未被确认的
                                                                                                              // I
                                                                                                              // 格式帧的最大数目
    private int                     K_104             = 0;                                                   // 当前发送方未被确认的
                                                                                                              // I
                                                                                                              // 格式帧的数目
    private final int               W_104_MAX         = 6;                                                   // W:接收方最多收到未给确认的
                                                                                                              // I
                                                                                                              // 格式帧的最大数目
    private int                     W_104             = 0;                                                   // 当前接收方收到未给确认的
                                                                                                              // I
                                                                                                              // 格式帧的数目

    private Date                    lastRecvTime      = Calendar.getInstance().getTime();
    private Date                    lastSendTime      = Calendar.getInstance().getTime();
    private boolean                 needConfirm       = false;
    // 发送接收序列号
    private short                   N_S               = 0;
    private short                   N_R               = 0;

    public PileService registerProtocol(byte[] buffer, ChannelService channel) {
        if (buffer == null || buffer.length < 15) {
            return null;
        }
        int index = 0;
        for (index = 0; index <= buffer.length - 15; index++) {
            /*
             * 起始标识 1Byte BIN码 固定68H 长度 2Byte BIN码 固定为”0x0C 0x00” 启动帧标识 1Byte BIN码 固定为 FF 协议版本 1Byte 压缩BCD码 保留为02 or 03
             * 设备编号 8Byte 压缩BCD码 充电设备编号,16 位编码,如果集中器(此处填全 0) 站地址 2Byte 压缩BCD码 站地址
             */
            if (buffer[index] == 0x68 && buffer[index + 1] == 0x0C && buffer[index + 2] == 0x0 && ProtocolUtils.Unsignd(buffer[index + 3]) == 0xFF
                && (buffer[index + 4] == 0x02 || buffer[index + 4] == 0x03)) { // 注册帧
                // 设备编号
                String devaddr = ProtocolUtils.getByteToHexStringDesc(buffer, index + 5, 8, "");
                PileService pileService = channel.linkPile(devaddr);
                if (pileService == null) {
                    continue;
                }

                byte[] reply = new byte[15];
                System.arraycopy(buffer, index, reply, 0, 15);
                channel.setReadDealPtr(channel.getReadDealPtr() + index + 15);
                pileService.notifyLogin(reply);
                return pileService;
            }
        }
        return null;
    }

    @Override
    public int onLogin(byte[] data, PileService pileService, ChannelService channel) {

        // 注册后初始化
        N_S = 0;
        N_R = 0;

        lastRecvTime = Calendar.getInstance().getTime();
        lastSendTime = Calendar.getInstance().getTime();

        needConfirm = false;

        if (data != null && data.length >= 15) {
            // 站地址
            short pubaddr = ProtocolUtils.byteToShort(data[14], data[13]);
            pileService.getPile().setPubAddress(pubaddr);
        }
        // 注册成功,发送U帧
        return writeData(channel, makeFrame_U(U_T_STARTDT));
    }

    public int onReceive(byte[] msg, PileService pileService, ChannelService channel) {
        int eopLen = 7;
        if (msg == null || msg.length < eopLen) {
            return 0;
        }
        int dealLen = 0;
        int recvLen = msg.length;
        while (recvLen - dealLen > 0) {
            if (msg[dealLen] != 0x68) {
                dealLen++;
                continue;
            }
            if (recvLen - dealLen < eopLen) {
                return dealLen;
            }
            APCI apci = new APCI(msg, dealLen);

            if (apci.length + 3 > recvLen - dealLen) { // 长度不够
                if (apci.length > 2047) { // 非法长度
                    dealLen++;
                    continue;
                }
                return dealLen;
            }
            dealLen += 3;
            lastRecvTime = Calendar.getInstance().getTime();
            needConfirm = false;
            if (apci.length == 4) { // 无ASDU数据，U帧、S帧

                if (msg[dealLen] == 0x0B && msg[dealLen + 1] == 0x0 && msg[dealLen + 2] == 0x0 && msg[dealLen + 3] == 0x0) { // STARTDT_CONT
                    // 发起总召
                    // N_R = apci.ns;
                    // N_S = apci.nr;
                    writeData(channel, makeIFrame(pileService, TYPE_C_IC_NA_1, 0, 0));

                } else if (msg[dealLen] == 0x43 && msg[dealLen + 1] == 0x0 && msg[dealLen + 2] == 0x0 && msg[dealLen + 3] == 0x0) { // TEST
                    // 确认测试
                    byte[] U_TEST = { 0x68, 0x04, 0x00, (byte) 0x83, 0x00, 0x00, 0x00 };
                    channel.writeData(U_TEST);
                }
            } else {
                ASDU asdu = new ASDU(msg, dealLen, apci.length);
                if (N_R != apci.ns) { // 出现漏帧或重复帧，关闭现在的 TCP 连接
                    closeConnect(pileService, channel);
                }
                N_R++;
                if (asdu.infoList != null && asdu.infoList.size() > 0) {
                    W_104++;
                    PileStatusBean bean = ChargingCacheUtil.getPileStatusBean(pileService.getPile().getId());
                    switch (asdu.type) {
                        case TYPE_M_SP_NA_1:
                            List<DcsHisYx> hisYxs;
                            hisYxs = getHisYx(pileService, asdu, bean);
                            pileService.getDataBaseService().saveData(hisYxs.toArray());

                            break;
                        case TYPE_M_ME_NB_1:
                            List<DcsHisYc> hisYcs;
                            hisYcs = getHisYc11(pileService, asdu, bean);
                            pileService.getDataBaseService().saveData(hisYcs.toArray());
                            bean.setPilecode(pileService.getPile().getPileCode());
                            bean.setUpdatetime(Calendar.getInstance().getTime());
                            break;
                        case TYPE_M_IT_NA_1:
                            break;
                        case TYPE_M_RE_NA_1:
                            TYPE130 type_130 = (TYPE130) asdu.infoList.get(0).data;
                            switch (type_130.type) {
                                case BizTypeUp.ReqFeeModel:
                                    writeData(channel, makeIFrame(pileService, TYPE_C_SD_NA_1, 0, BizTypeDown.FeeModel));
                                    break;
                                case BizTypeUp.ChargeRec:
                                    writeData(channel, makeIFrame(pileService, TYPE_C_SD_NA_1, 0, BizTypeDown.ChargeConfirm));

                                    BizUpChargeRec rec = (BizUpChargeRec) type_130.value;
                                    // 记录数据库
                                    /*
                                     * ChargeRecord chargeRecord = new ChargeRecord();
                                     * chargeRecord.setChargeid(pileService.getPile().getId());
                                     * chargeRecord.setChargeType((short) rec.userType); chargeRecord.setPileNum((short)
                                     * rec.chargeInterface); chargeRecord.setTradeNo(rec.tradeNo);
                                     * chargeRecord.setPayNo(rec.payNo); chargeRecord.setCardNo(rec.CardNo);
                                     * chargeRecord.setIsTimes(Short.valueOf(rec.isTimes));
                                     * chargeRecord.setStartTime((rec.startTime).getTime());
                                     * chargeRecord.setEndTime((rec.endTime).getTime());
                                     * chargeRecord.setBmj1(rec.jianBegValue);// BMJ1 尖起示值
                                     * chargeRecord.setBmj2(rec.jianEndValue); chargeRecord.setBmf1(rec.peakBegValue);//
                                     * BMF1 峰起示值 chargeRecord.setBmf2(rec.peakEndValue);
                                     * chargeRecord.setBmp1(rec.flatBegValue);// BMP1 平起示值
                                     * chargeRecord.setBmp2(rec.flatEndValue);
                                     * chargeRecord.setBmg1(rec.valleyBegValue);// BMG1 谷起示值
                                     * chargeRecord.setBmg2(rec.valleyEndValue);
                                     * chargeRecord.setMetType(Double.valueOf(rec.metType));// MET_TYPE // 计量类型
                                     * chargeRecord.setBmz1(rec.totalBegValue);// BMZ1 总起示值
                                     * chargeRecord.setBmz2(rec.totalEndValue); chargeRecord.setDjj(new
                                     * BigDecimal((rec.jianPrice) + "")); chargeRecord.setDlj(rec.jianElec);
                                     * chargeRecord.setJej(new BigDecimal((rec.jianMoney) + ""));// JEJ // 尖金额
                                     * chargeRecord.setDjf(new BigDecimal((rec.peakPrice) + ""));
                                     * chargeRecord.setDlf(rec.peakElec); chargeRecord.setJef(new
                                     * BigDecimal((rec.peakMoney) + "")); chargeRecord.setDjp(new
                                     * BigDecimal((rec.flatPrice) + "")); chargeRecord.setDlp(rec.flatElec);
                                     * chargeRecord.setJep(new BigDecimal((rec.flatMoney) + ""));
                                     * chargeRecord.setDjg(new BigDecimal((rec.valleyPrice) + ""));
                                     * chargeRecord.setDlg(rec.valleyElec); chargeRecord.setJeg(new
                                     * BigDecimal((rec.valleyMoney) + "")); chargeRecord.setDlz(rec.totalElec);
                                     * chargeRecord.setBusType(Short.valueOf(rec.businessType));
                                     * chargeRecord.setAfterMoney(new BigDecimal((rec.afterMoney) + ""));
                                     * chargeRecord.setXfdj(new BigDecimal((rec.consumPrice) + ""));
                                     * chargeRecord.setXfje(new BigDecimal((rec.consumMoney) + ""));
                                     * chargeRecord.setMark(rec.carId); chargeRecord.setPayStatus((short)
                                     * rec.payStatus); chargeRecord.setClientNo(rec.clientNo);
                                     * chargeRecord.setBeforeMoney(new BigDecimal((rec.beforeMoney) + ""));
                                     * chargeRecord.setBagNo(rec.walletTradeNo); chargeRecord.setPayMoney(new
                                     * BigDecimal((rec.payMoney) + "")); chargeRecord.setDateTime(rec.payTime);
                                     * chargeRecord.setRadomNo(rec.randomNo); chargeRecord.setPayType((short)
                                     * rec.payType); chargeRecord.setTac(rec.TAC);
                                     * chargeRecord.setKeyVersion(String.valueOf(rec.keyVersion));
                                     * chargeRecord.setTerminalNo(rec.terminalNo); chargeRecord.setChaPrice(new
                                     * BigDecimal((rec.chargePrice) + "")); chargeRecord.setChaMoney(new
                                     * BigDecimal((rec.chargeMoney) + ""));
                                     * pileService.getDataBaseService().saveData(chargeRecord);
                                     */
                                    break;
                                case BizTypeUp.AuthWithoutCard:
                                    // writeData(channel,makeIFrame(pileService,TYPE_C_SD_NA_1,0,BizTypeDown.AuthWithoutCard));
                                    // TODO 发送验证码
                                    break;
                                case BizTypeUp.AuthWithoutCardVeriCode:
                                    writeData(channel, makeIFrame(pileService, TYPE_C_SD_NA_1, 0, BizTypeDown.AuthWithoutCard));
                                    break;
                                case BizTypeUp.AuthWithIDCard:
                                    writeData(channel, makeIFrame(pileService, TYPE_C_SD_NA_1, 0, BizTypeDown.AuthWithIDCard));
                                    break;
                                case BizTypeUp.AppointmentLock:
                                    writeData(channel, makeIFrame(pileService, TYPE_C_SD_NA_1, 0, BizTypeDown.AppointmentLock));
                                    break;
                                case BizTypeUp.ChargeEventStart:
                                    writeData(channel, makeIFrame(pileService, TYPE_C_SD_NA_1, 0, BizTypeDown.ChargeEventStart));
                                    break;
                                case BizTypeUp.IDCardFrozenMoney:
                                    writeData(channel, makeIFrame(pileService, TYPE_C_SD_NA_1, 0, BizTypeDown.IDCardFrozenMoney));
                                    break;
                                case BizTypeUp.SoftUpdateAbstract:
                                case BizTypeUp.SoftUpdateFileReq:
                                case BizTypeUp.ChargeEventEnd:
                                default:
                                    writeData(channel, makeFrame_S());
                                    break;
                            }
                            break;
                        case TYPE_M_MD_NA_1:
                            DcsHisYa hisYa = new DcsHisYa();
                            TYPE132 type_132 = (TYPE132) asdu.infoList.get(0).data;
                            hisYa.setChargeid(pileService.getPile().getId());
                            if (pileService.getPile().getChaWay().equals(ChargeCurrentTypeEnum.DC.getShortValue())) {
                                hisYa.setDataType(INFO_ADDR_DC.getYXCode(asdu.infoList.get(0).addr));
                            } else {
                                hisYa.setDataType(INFO_ADDR_AC.getYXCode(asdu.infoList.get(0).addr));
                            }
                            hisYa.setDataTime(Calendar.getInstance().getTime());
                            int value = ProtocolUtils.byteToInteger(type_132.value, 0);
                            hisYa.setValue(value);
                            pileService.getDataBaseService().saveData(hisYa);

                            bean.setChapower(Double.valueOf(value + ""));
                            pileService.freshMemPileStatus(bean);
                            break;
                        case TYPE_M_JC_NA_1:
                            TYPE134 type_134 = (TYPE134) asdu.infoList.get(0).data;
                            if (type_134 != null) {
                                if (pileService.getPile().getChaWay().intValue() != type_134.type) {
                                    logger.error("Pile parameters error!!(PileID=" + pileService.getPile().getId() + ")	Cha_way=" + pileService.getPile().getChaWay()
                                                 + ",but type=" + type_134.type);
                                }
                                if (type_134.type == 1) {
                                    BizACPileMonitor m = (BizACPileMonitor) type_134.value;
                                    bean.setOuti(String.valueOf(m.acOutI));
                                    bean.setOutv(String.valueOf(m.acOutV));
                                    bean.setChalen(m.totalTime);
                                    bean.setChapower((double) m.chargedEnergy);
                                    bean.setMoney(new BigDecimal(m.chargedMoney));
                                    bean.setIsonline((short) 1);
                                    if (m.connectCar) {
                                        bean.setStatus(PileStatusEnum.CHARGING);
                                    }
                                } else if (type_134.type == 2) {
                                    BizDCPileMonitor m = (BizDCPileMonitor) type_134.value;
                                    bean.setOuti(String.valueOf(m.dcOutI));
                                    bean.setOutv(String.valueOf(m.dcOutV));
                                    bean.setChalen(m.totalTime);
                                    bean.setChapower((double) m.chargedEnergy);
                                    bean.setMoney(new BigDecimal(m.chargedMoney));
                                    bean.setIsonline((short) 1);
                                    if (m.connectCar) {
                                        bean.setStatus(PileStatusEnum.CHARGING);
                                    }
                                }
                            }
                            pileService.freshMemPileStatus(bean);

                        default:
                            break;
                    }
                    if (W_104 >= W_104_MAX) {
                        writeData(channel, makeFrame_S());
                    }
                }
            }
            dealLen += apci.length;
        }
        return dealLen;
    }

    @Override
    public int sendBizData(BizCmdTypeEnum cmdType, Object data, PileService pileService, ChannelService channel) {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public void onTimer(PileService pileService, ChannelService channel) {
        if (channel == null) {
            return;
        }
        Date now = Calendar.getInstance().getTime();

        // 连续收到上报I帧，超时确认
        if (now.getTime() - lastRecvTime.getTime() > T2_104 * 1000) {
            writeData(channel, makeFrame_S());
        }

        // 未收到确认帧断开连接
        if (now.getTime() - lastSendTime.getTime() > T1_104 * 1000) {
            if (needConfirm) {
                closeConnect(pileService, channel);
            }
        }

        // 超过心跳间隔
        if (now.getTime() - lastRecvTime.getTime() > T4_heart * 1000) {
            closeConnect(pileService, channel);
        }

    }

    @Override
    public int sendHeart(PileService pileService, ChannelService channel) {
        return writeData(channel, makeFrame_U(U_T_TEST));
    }

    private byte[] makeFrame_U(byte type) {
        byte[] U_STARTDT = { 0x68, 0x04, 0x00, type, 0x00, 0x00, 0x00 };
        return U_STARTDT;
    }

    private byte[] makeFrame_S() {
        byte[] S = { 0x68, 0x04, 0x00, 0x01, 0x00, (byte) ((N_R << 1) & 0xFF), (byte) ((N_R >> 7) & 0xFF) };
        return S;
    }

    private byte[] makeIFrame(PileService pileService, byte type, int infoaddr, int bizType) {
        APDU callAll = new APDU(pileService);
        N_S++;
        if (type == TYPE_C_IC_NA_1) {
            callAll.apci.ns = N_S;
            callAll.apci.nr = 0;
            callAll.asdu.sq = 0;
            callAll.asdu.num = 1;
            callAll.asdu.cos = 6;
        } else {
            callAll.apci.ns = N_S;
            callAll.apci.nr = N_R;
            callAll.asdu.sq = 1;
            callAll.asdu.num = 127;
            callAll.asdu.cos = 7;
        }

        callAll.asdu.type = type;

        // 激活
        callAll.asdu.pubaddr = pileService.getPile().getPubAddress();
        callAll.asdu.infoList.add(new ASDU_Info(infoaddr));
        return callAll.toByte(bizType);
    }

    private class APCI {

        byte  start_c = 0x68;
        short length  = 0;
        short ns      = 0;
        short nr      = 0;

        APCI() {

        }

        APCI(byte[] buf, int from) {
            length = ProtocolUtils.byteToShort(buf[from + 2], buf[from + 1]);
            ns = ProtocolUtils.byteToShort(buf[from + 4], buf[from + 3]);
            nr = ProtocolUtils.byteToShort(buf[from + 6], buf[from + 5]);
        }

        byte[] toByte() {
            byte[] APCI = { start_c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            APCI[1] = (byte) (length & 0xFF);
            APCI[2] = (byte) ((length >> 8) & 0x07);

            APCI[4] = (byte) ((ns << 1) & 0xFF);
            APCI[3] = (byte) ((ns >> 7) & 0xFF);

            APCI[5] = (byte) (nr & 0xFF);
            APCI[6] = (byte) ((nr >> 8) & 0xFF);
            return APCI;
        }
    }

    private class ASDU {

        byte            type;
        byte            sq;
        byte            num;
        short           cos;
        short           pubaddr;
        List<ASDU_Info> infoList = new ArrayList<ASDU_Info>();
        byte[]          appdata;
        PileService     pileService;

        ASDU(PileService pileService) {
            pileService = pileService;
        }

        ASDU(byte[] data, int from, int len) {
            int index = from + 4;
            type = data[index++];
            num = (byte) (data[index] & 0x7F);
            if (num == 0) {
                num = 1;
            }
            sq = (byte) ((data[index] & 0x80) == 0 ? 0 : 1);
            index++;
            cos = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            pubaddr = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;

            if (sq == 0) {
                for (int i = 0; i < num; i++) {
                    int addr_info = ProtocolUtils.Unsignd(data[index]) + ProtocolUtils.Unsignd(data[index + 1]) * 0x100 + ProtocolUtils.Unsignd(data[index + 2]) * 0x10000;
                    index += 3;
                    ASDU_Info info = new ASDU_Info(addr_info);
                    int infodatalen = parseASDUInfo(type, data, index, info);
                    index += infodatalen;
                    infoList.add(info);
                }
            } else {
                int addr_info = ProtocolUtils.Unsignd(data[index]) + ProtocolUtils.Unsignd(data[index + 1]) * 0x100 + ProtocolUtils.Unsignd(data[index + 2]) * 0x10000;
                index += 3;
                for (int i = 0; i < num; i++) {
                    ASDU_Info info = new ASDU_Info(addr_info);
                    int infodatalen = parseASDUInfo(type, data, index, info);
                    index += infodatalen;
                    infoList.add(info);
                }
            }

        }

        byte[] toByte(int bizType) {
            int index = 0; // APCI的长度
            byte[] data = new byte[2096];

            data[index++] = type;
            data[index++] = sq == 0 ? num : (byte) (num | 0x80);
            data[index++] = (byte) (cos & 0xFF);
            data[index++] = (byte) ((cos >> 8) & 0xFF);
            data[index++] = (byte) (pubaddr & 0xFF);
            data[index++] = (byte) ((pubaddr >> 8) & 0xFF);
            for (int i = 0; i < infoList.size(); i++) {
                data[index++] = (byte) (infoList.get(i).addr & 0xFF);
                data[index++] = (byte) ((infoList.get(i).addr >> 8) & 0xFF);
                data[index++] = 0;
                switch (type) {
                    case TYPE_C_IC_NA_1:
                        data[index++] = 0x14; // 站召唤
                        break;
                    case TYPE_C_CI_NA_1:
                        data[index++] = 0x05; // 站召唤
                        break;
                    case TYPE_C_CS_NA_1:
                        if (infoList.get(i).data instanceof Calendar) {
                            Calendar date = (Calendar) infoList.get(i).data;
                            ProtocolUtils.copyBytes(cp56time2a.toByte(date), 0, data, index, 7);
                        }
                        break;
                    case TYPE_C_SD_NA_1:
                        // if(infoList.get(i).data instanceof Calendar){
                        //
                        // }
                        data[index++] = (byte) bizType;
                        TYPE133 type_133 = new TYPE133(pileService, bizType);
                        // int bizType = type_133.type;
                        BizDownBase typeValue = (BizDownBase) type_133.value;
                        for (int j = typeValue.devcode.length(); j >= 2; j--) {
                            data[index++] = Byte.valueOf(typeValue.devcode.substring(j - 2, j));
                            j--;
                        }
                        System.arraycopy(type_133.value.toByte(), 0, data, index, type_133.value.toByte().length);
                        /*
                         * switch (bizType) { case 1: BizDownBlackList type_1 = (BizDownBlackList) type_133.value;
                         * data[index++] = (byte) (type_1.chargeInterface & 0xFF); for (int j =
                         * type_1.timeStampNo.length(); j >= 2; j--) { data[index++] =
                         * Byte.valueOf(type_1.timeStampNo.substring(j - 2, j)); j--; } data[index++] = (byte)
                         * (type_1.blackListNum & 0xFF); for (int j = 0; j < type_1.blackListNum - 1; j++) {
                         * data[index++] = (byte) (type_1.cardStatus[j] & 0xFF); data[index++] = (byte)
                         * (type_1.cardStatus[j] & 0xFF); } break; case 2: BizDownAuth type_2 = (BizDownAuth)
                         * type_133.value; data[index++] = (byte) (type_2.chargeInterface & 0xFF); for (int k =
                         * type_2.cardNo.length(); k >= 2; k--) { data[index++] = (byte)
                         * (Integer.parseInt(type_2.cardNo.substring(k - 2, k), 16) & 0xff); //
                         * Byte.valueOf(type_2.cardNo.substring(k-2, k)); k--; } // 电动汽车表示 byte[] carId =
                         * type_2.carId.getBytes(); for (int j = carId.length - 1; j >= 0; j--) { data[index++] =
                         * carId[j]; } for (int k = type_2.feeModelId.length(); k >= 2; k--) { // data[index++] =
                         * Byte.valueOf(type_2.feeModelId.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_2.feeModelId.substring(k - 2, k), 16) & 0xff); k--; } data[index++] =
                         * (byte) ((int) (type_2.afterMoney * 100) & 0xFF); data[index++] = (byte) (((int)
                         * type_2.afterMoney * 100 >> 8) & 0xFF); data[index++] = (byte) (((int) type_2.afterMoney * 100
                         * >> 16) & 0xFF); data[index++] = (byte) (((int) type_2.afterMoney * 100 >> 24) & 0xFF);
                         * data[index++] = (byte) (type_2.isSuccess ? 1 : 0); for (int k = type_2.authError.length(); k
                         * >= 2; k--) { // data[index++] = Byte.valueOf(type_2.authError.substring(k-2, k));
                         * data[index++] = (byte) (Integer.parseInt(type_2.authError.substring(k - 2, k), 16) & 0xff);
                         * k--; } data[index++] = (byte) ((int) type_2.afterMiles * 100 & 0xFF); data[index++] = (byte)
                         * (((int) type_2.afterMiles * 100 >> 8) & 0xFF); data[index++] = (byte) (((int)
                         * type_2.afterMiles * 100 >> 16) & 0xFF); data[index++] = (byte) (((int) type_2.afterMiles *
                         * 100 >> 24) & 0xFF); data[index++] = (byte) ((int) type_2.chargeElec * 100 & 0xFF);
                         * data[index++] = (byte) (((int) type_2.chargeElec * 100 >> 8) & 0xFF); data[index++] = (byte)
                         * (((int) type_2.chargeElec * 100 >> 16) & 0xFF); data[index++] = (byte) (((int)
                         * type_2.chargeElec * 100 >> 24) & 0xFF); data[index++] = (byte) ((int) type_2.remainTimes *
                         * 100 & 0xFF); data[index++] = (byte) (((int) type_2.remainTimes * 100 >> 8) & 0xFF);
                         * data[index++] = (byte) (((int) type_2.remainTimes * 100 >> 16) & 0xFF); data[index++] =
                         * (byte) (((int) type_2.remainTimes * 100 >> 24) & 0xFF); break; case 3: BizDownChargeConfirm
                         * type_3 = (BizDownChargeConfirm) type_133.value; data[index++] = (byte)
                         * (type_3.chargeInterface & 0xFF); data[index++] = (byte) (type_3.isSuccess & 0xFF); break;
                         * case 4: BizDownChargeAfterMoney type_4 = (BizDownChargeAfterMoney) type_133.value;
                         * data[index++] = (byte) (type_4.chargeInterface & 0xFF); for (int k = type_4.cardNo.length();
                         * k >= 2; k--) { // data[index++] = Byte.valueOf(type_4.cardNo.substring(k-2, k));
                         * data[index++] = (byte) (Integer.parseInt(type_4.cardNo.substring(k - 2, k), 16) & 0xff); k--;
                         * } data[index++] = (byte) ((int) type_4.deductMoney * 100 & 0xFF); data[index++] = (byte)
                         * (((int) type_4.deductMoney * 100 >> 8) & 0xFF); data[index++] = (byte) (((int)
                         * type_4.deductMoney * 100 >> 16) & 0xFF); data[index++] = (byte) (((int) type_4.deductMoney *
                         * 100 >> 24) & 0xFF); data[index++] = (byte) ((int) type_4.afterMoney * 100 & 0xFF);
                         * data[index++] = (byte) (((int) type_4.afterMoney * 100 >> 8) & 0xFF); data[index++] = (byte)
                         * (((int) type_4.afterMoney * 100 >> 16) & 0xFF); data[index++] = (byte) (((int)
                         * type_4.afterMoney * 100 >> 24) & 0xFF); data[index++] = (byte) (type_4.isDeduct ? 1 : 0); for
                         * (int k = type_4.deductError.length(); k >= 2; k--) { // data[index++] =
                         * Byte.valueOf(type_4.deductError.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_4.deductError.substring(k - 2, k), 16) & 0xff); k--; } data[index++] =
                         * (byte) ((int) type_4.deductMiles * 100 & 0xFF); data[index++] = (byte) (((int)
                         * type_4.deductMiles * 100 >> 8) & 0xFF); data[index++] = (byte) (((int) type_4.deductMiles *
                         * 100 >> 16) & 0xFF); data[index++] = (byte) (((int) type_4.deductMiles * 100 >> 24) & 0xFF);
                         * data[index++] = (byte) ((int) type_4.afterMiles * 100 & 0xFF); data[index++] = (byte) (((int)
                         * type_4.afterMiles * 100 >> 8) & 0xFF); data[index++] = (byte) (((int) type_4.afterMiles * 100
                         * >> 16) & 0xFF); data[index++] = (byte) (((int) type_4.afterMiles * 100 >> 24) & 0xFF);
                         * data[index++] = (byte) ((int) type_4.deductElec * 100 & 0xFF); data[index++] = (byte) (((int)
                         * type_4.deductElec * 100 >> 8) & 0xFF); data[index++] = (byte) (((int) type_4.deductElec * 100
                         * >> 16) & 0xFF); data[index++] = (byte) (((int) type_4.deductElec * 100 >> 24) & 0xFF);
                         * data[index++] = (byte) ((int) type_4.afterElec * 100 & 0xFF); data[index++] = (byte) (((int)
                         * type_4.afterElec * 100 >> 8) & 0xFF); data[index++] = (byte) (((int) type_4.afterElec * 100
                         * >> 16) & 0xFF); data[index++] = (byte) (((int) type_4.afterElec * 100 >> 24) & 0xFF);
                         * data[index++] = (byte) ((int) type_4.deductTimes * 100 & 0xFF); data[index++] = (byte)
                         * (((int) type_4.deductTimes * 100 >> 8) & 0xFF); data[index++] = (byte) (((int)
                         * type_4.deductTimes * 100 >> 16) & 0xFF); data[index++] = (byte) (((int) type_4.deductTimes *
                         * 100 >> 24) & 0xFF); data[index++] = (byte) ((int) type_4.afterTimes * 100 & 0xFF);
                         * data[index++] = (byte) (((int) type_4.afterTimes * 100 >> 8) & 0xFF); data[index++] = (byte)
                         * (((int) type_4.afterTimes * 100 >> 16) & 0xFF); data[index++] = (byte) (((int)
                         * type_4.afterTimes * 100 >> 24) & 0xFF); break; case 5: BizDownTradeRandom type_5 =
                         * (BizDownTradeRandom) type_133.value; data[index++] = (byte) (type_5.chargeInterface & 0xFF);
                         * for (int k = type_5.randomNo.length(); k >= 2; k--) { // data[index++] =
                         * Byte.valueOf(type_5.randomNo.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_5.randomNo.substring(k - 2, k), 16) & 0xff); k--; } break; case 6:
                         * BizDownFeeModel type_6 = (BizDownFeeModel) type_133.value; data[index++] = (byte)
                         * (type_6.chargeInterface & 0xFF); for (int k = type_6.feeModelId.length(); k >= 2; k--) { //
                         * data[index++] = Byte.valueOf(type_6.feeModelId.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_6.feeModelId.substring(k - 2, k), 16) & 0xff); k--; } // TODO byte[]
                         * startTime = cp56time2a.toByte(type_6.startTime); for (int j = startTime.length - 1; j > 0;
                         * j--) { data[index++] = startTime[j]; } byte[] endTime = cp56time2a.toByte(type_6.endTime);
                         * for (int j = endTime.length - 1; j > 0; j--) { data[index++] = endTime[j]; } for (int k =
                         * type_6.performStatus.length(); k >= 2; k--) { // data[index++] =
                         * Byte.valueOf(type_6.performStatus.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_6.performStatus.substring(k - 2, k), 16) & 0xff); k--; } for (int k =
                         * type_6.metType.length(); k >= 2; k--) { // data[index++] =
                         * Byte.valueOf(type_6.metType.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_6.metType.substring(k - 2, k), 16) & 0xff); k--; } data[index++] =
                         * (byte) (type_6.periodNum & 0xFF); // TODO // n个时间段...... for (int j = 0; j < type_6.periodNum
                         * - 1; j++) { data[index++] = (byte) (type_6.periodStart[j] & 0xFF); data[index++] = (byte)
                         * (type_6.periodType[j] & 0xFF); } data[index++] = (byte) ((int) type_6.jianPrice * 100000 &
                         * 0xFF); data[index++] = (byte) (((int) type_6.jianPrice * 100000 >> 8) & 0xFF); data[index++]
                         * = (byte) (((int) type_6.jianPrice * 100000 >> 16) & 0xFF); data[index++] = (byte) (((int)
                         * type_6.jianPrice * 100000 >> 24) & 0xFF); data[index++] = (byte) ((int) type_6.peakPrice *
                         * 100000 & 0xFF); data[index++] = (byte) (((int) type_6.peakPrice * 100000 >> 8) & 0xFF);
                         * data[index++] = (byte) (((int) type_6.peakPrice * 100000 >> 16) & 0xFF); data[index++] =
                         * (byte) (((int) type_6.peakPrice * 100000 >> 24) & 0xFF); data[index++] = (byte) ((int)
                         * type_6.flatPrice * 100000 & 0xFF); data[index++] = (byte) (((int) type_6.flatPrice * 100000
                         * >> 8) & 0xFF); data[index++] = (byte) (((int) type_6.flatPrice * 100000 >> 16) & 0xFF);
                         * data[index++] = (byte) (((int) type_6.flatPrice * 100000 >> 24) & 0xFF); data[index++] =
                         * (byte) ((int) type_6.valleyPrice * 100000 & 0xFF); data[index++] = (byte) (((int)
                         * type_6.valleyPrice * 100000 >> 8) & 0xFF); data[index++] = (byte) (((int) type_6.valleyPrice
                         * * 100000 >> 16) & 0xFF); data[index++] = (byte) (((int) type_6.valleyPrice * 100000 >> 24) &
                         * 0xFF); data[index++] = (byte) ((int) type_6.chargePrice * 100000 & 0xFF); data[index++] =
                         * (byte) (((int) type_6.chargePrice * 100000 >> 8) & 0xFF); data[index++] = (byte) (((int)
                         * type_6.chargePrice * 100000 >> 16) & 0xFF); data[index++] = (byte) (((int) type_6.chargePrice
                         * * 100000 >> 24) & 0xFF); data[index++] = (byte) ((int) type_6.parkPrice * 100000 & 0xFF);
                         * data[index++] = (byte) (((int) type_6.parkPrice * 100000 >> 8) & 0xFF); data[index++] =
                         * (byte) (((int) type_6.parkPrice * 100000 >> 16) & 0xFF); data[index++] = (byte) (((int)
                         * type_6.parkPrice * 100000 >> 24) & 0xFF); data[index++] = (byte) ((int) type_6.bookPrice *
                         * 100000 & 0xFF); data[index++] = (byte) (((int) type_6.bookPrice * 100000 >> 8) & 0xFF);
                         * data[index++] = (byte) (((int) type_6.bookPrice * 100000 >> 16) & 0xFF); data[index++] =
                         * (byte) (((int) type_6.bookPrice * 100000 >> 24) & 0xFF); break; case 7:
                         * BizDownTwowayAuthRandom type_7 = (BizDownTwowayAuthRandom) type_133.value; data[index++] =
                         * (byte) (type_7.chargeInterface & 0xFF); for (int k = type_7.randomNo.length(); k >= 2; k--) {
                         * // data[index++] = Byte.valueOf(type_7.randomNo.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_7.randomNo.substring(k - 2, k), 16) & 0xff); k--; } break; case 8:
                         * BizDownTwowayAuthData type_8 = (BizDownTwowayAuthData) type_133.value; data[index++] = (byte)
                         * (type_8.chargeInterface & 0xFF); data[index++] = (byte) (type_8.isSuccess & 0xFF); for (int k
                         * = type_8.authCode.length(); k >= 2; k--) { // data[index++] =
                         * Byte.valueOf(type_8.authCode.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_8.authCode.substring(k - 2, k), 16) & 0xff); k--; } break; case 9:
                         * BizDownKeyUpdateCommand type_9 = (BizDownKeyUpdateCommand) type_133.value; data[index++] =
                         * (byte) (type_9.chargeInterface & 0xFF); for (int k = type_9.updateCommand.length(); k >= 2;
                         * k--) { // data[index++] = Byte.valueOf(type_9.updateCommand.substring(k-2, k)); data[index++]
                         * = (byte) (Integer.parseInt(type_9.updateCommand.substring(k - 2, k), 16) & 0xff); k--; }
                         * break; case 10: BizDownKey1Update type_10 = (BizDownKey1Update) type_133.value; data[index++]
                         * = (byte) (type_10.chargeInterface & 0xFF); // TODO // 更新数据包 byte[] keyData =
                         * ProtocolUtils.StringToHex(type_10.keyData); for (int j = keyData.length - 1; j > 0; j--) {
                         * data[index++] = keyData[j]; } break; case 11: BizDownKey2Update type_11 = (BizDownKey2Update)
                         * type_133.value; data[index++] = (byte) (type_11.chargeInterface & 0xFF); // TODO // 更新数据包
                         * keyData = ProtocolUtils.StringToHex(type_11.keyData); for (int j = keyData.length - 1; j > 0;
                         * j--) { data[index++] = keyData[j]; } break; case 12: BizDownRemoteStart type_12 =
                         * (BizDownRemoteStart) type_133.value; data[index++] = (byte) (type_12.chargeInterface & 0xFF);
                         * for (int k = type_12.remoteStart.length(); k >= 2; k--) { // data[index++] =
                         * Byte.valueOf(type_12.remoteStart.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_12.remoteStart.substring(k - 2, k), 16) & 0xff); k--; } break; case
                         * 13: BizDownRemoteStop type_13 = (BizDownRemoteStop) type_133.value; data[index++] = (byte)
                         * (type_13.chargeInterface & 0xFF); for (int k = type_13.remoteStop.length(); k >= 2; k--) { //
                         * data[index++] = Byte.valueOf(type_13.remoteStop.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_13.remoteStop.substring(k - 2, k), 16) & 0xff); k--; } break; case 14:
                         * BizDownPowerControl type_14 = (BizDownPowerControl) type_133.value; data[index++] = (byte)
                         * (type_14.chargeInterface & 0xFF); for (int k = type_14.powerParame.length(); k >= 2; k--) {
                         * // data[index++] = Byte.valueOf(type_14.powerParame.substring(k-2, k)); data[index++] =
                         * (byte) (Integer.parseInt(type_14.powerParame.substring(k - 2, k), 16) & 0xff); k--; } endTime
                         * = cp56time2a.toByte(type_14.endTime); for (int j = endTime.length - 1; j > 0; j--) {
                         * data[index++] = endTime[j]; } break; case 15: BizDownSoftUpdate type_15 = (BizDownSoftUpdate)
                         * type_133.value; for (int k = type_15.softUpdate.length(); k >= 2; k--) { // data[index++] =
                         * Byte.valueOf(type_15.softUpdate.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_15.softUpdate.substring(k - 2, k), 16) & 0xff); k--; } break; case 16:
                         * BizDownChargingDataResult type_16 = (BizDownChargingDataResult) type_133.value; data[index++]
                         * = (byte) (type_16.chargeInterface & 0xFF); for (int k = type_16.cardNo.length(); k >= 2; k--)
                         * { // data[index++] = Byte.valueOf(type_16.cardNo.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_16.cardNo.substring(k - 2, k), 16) & 0xff); k--; } data[index++] =
                         * (byte) ((int) type_16.deductMoney * 100 & 0xFF); data[index++] = (byte) (((int)
                         * type_16.deductMoney * 100 >> 8) & 0xFF); data[index++] = (byte) (((int) type_16.deductMoney *
                         * 100 >> 16) & 0xFF); data[index++] = (byte) (((int) type_16.deductMoney * 100 >> 24) & 0xFF);
                         * data[index++] = (byte) ((int) type_16.afterMoney * 100 & 0xFF); data[index++] = (byte)
                         * (((int) type_16.afterMoney * 100 >> 8) & 0xFF); data[index++] = (byte) (((int)
                         * type_16.afterMoney * 100 >> 16) & 0xFF); data[index++] = (byte) (((int) type_16.afterMoney *
                         * 100 >> 24) & 0xFF); data[index++] = (byte) (type_16.isDeduct ? 1 : 0); for (int k =
                         * type_16.deductError.length(); k >= 2; k--) { // data[index++] =
                         * Byte.valueOf(type_16.deductError.substring(k-2, k)); data[index++] = (byte)
                         * (Integer.parseInt(type_16.deductError.substring(k - 2, k), 16) & 0xff); k--; } data[index++]
                         * = (byte) ((int) type_16.deductMiles * 100 & 0xFF); data[index++] = (byte) (((int)
                         * type_16.deductMiles * 100 >> 8) & 0xFF); data[index++] = (byte) (((int) type_16.deductMiles *
                         * 100 >> 16) & 0xFF); data[index++] = (byte) (((int) type_16.deductMiles * 100 >> 24) & 0xFF);
                         * data[index++] = (byte) ((int) type_16.afterMiles * 100 & 0xFF); data[index++] = (byte)
                         * (((int) type_16.afterMiles * 100 >> 8) & 0xFF); data[index++] = (byte) (((int)
                         * type_16.afterMiles * 100 >> 16) & 0xFF); data[index++] = (byte) (((int) type_16.afterMiles *
                         * 100 >> 24) & 0xFF); data[index++] = (byte) ((int) type_16.deductElec * 100 & 0xFF);
                         * data[index++] = (byte) (((int) type_16.deductElec * 100 >> 8) & 0xFF); data[index++] = (byte)
                         * (((int) type_16.deductElec * 100 >> 16) & 0xFF); data[index++] = (byte) (((int)
                         * type_16.deductElec * 100 >> 24) & 0xFF); data[index++] = (byte) ((int) type_16.afterElec *
                         * 100 & 0xFF); data[index++] = (byte) (((int) type_16.afterElec * 100 >> 8) & 0xFF);
                         * data[index++] = (byte) (((int) type_16.afterElec * 100 >> 16) & 0xFF); data[index++] = (byte)
                         * (((int) type_16.afterElec * 100 >> 24) & 0xFF); data[index++] = (byte) ((int)
                         * type_16.deductTimes * 100 & 0xFF); data[index++] = (byte) (((int) type_16.deductTimes * 100
                         * >> 8) & 0xFF); data[index++] = (byte) (((int) type_16.deductTimes * 100 >> 16) & 0xFF);
                         * data[index++] = (byte) (((int) type_16.deductTimes * 100 >> 24) & 0xFF); data[index++] =
                         * (byte) ((int) type_16.afterTimes * 100 & 0xFF); data[index++] = (byte) (((int)
                         * type_16.afterTimes * 100 >> 8) & 0xFF); data[index++] = (byte) (((int) type_16.afterTimes *
                         * 100 >> 16) & 0xFF); data[index++] = (byte) (((int) type_16.afterTimes * 100 >> 24) & 0xFF);
                         * break; case 17: BizDownChargingReportSet type_17 = (BizDownChargingReportSet) type_133.value;
                         * data[index++] = (byte) (type_17.chargeInterface & 0xFF); data[index++] = (byte)
                         * (type_17.intervalTime & 0xFF); data[index++] = (byte) ((type_17.intervalTime >> 8) & 0xFF);
                         * data[index++] = (byte) (type_17.minintervalTime & 0xFF); data[index++] = (byte)
                         * ((type_17.minintervalTime >> 8) & 0xFF); break; }
                         */
                        break;
                    default:
                        break;
                }
            }
            byte[] result = new byte[index];
            ProtocolUtils.copyBytes(data, result, index);
            return result;
        }

        int parseASDUInfo(byte type, byte[] data, int from, ASDU_Info info) {
            int len = 0;
            switch (type) {
                case TYPE_M_SP_NA_1:
                    info.data = new TYPE1(data[from], info.addr);
                    len = 1;
                    break;
                case TYPE_M_ME_NB_1:
                    len = 3;
                    info.data = new TYPE11(data, from, info.addr);
                    break;
                case TYPE_M_IT_NA_1:
                    len = 5;
                    info.data = new TYPE15(data, from, info.addr);
                    break;
                case TYPE_M_RE_NA_1:
                    info.data = new TYPE130(data, from, info.addr);
                    len = ((TYPE130) info.data).len + 2;
                    break;
                case TYPE_M_MD_NA_1:
                    info.data = new TYPE132(data, from, info.addr);
                    len = ((TYPE132) info.data).len + 2;
                    break;
                case TYPE_M_JC_NA_1:
                    info.data = new TYPE134(data, from, info.addr);

                    len = ((TYPE134) info.data).len + 2;
                    break;
                default:
                    break;
            }
            return len;
        }
    }

    private class ASDU_Info {

        public ASDU_Info(int infoaddr) {
            addr = infoaddr;
        }

        int    addr;
        Object data;
    }

    private class APDU {

        APCI apci = new APCI();
        ASDU asdu;

        public APDU(PileService pileService) {
            asdu = new ASDU(pileService);
        }

        byte[] toByte(int bizType) {
            byte[] buf_asdu = asdu.toByte(bizType);
            byte[] data = new byte[buf_asdu.length + 7];
            apci.length = (short) (buf_asdu.length + 4);
            ProtocolUtils.copyBytes(apci.toByte(), data, 7);
            ProtocolUtils.copyBytes(buf_asdu, 0, data, 7, buf_asdu.length);
            return data;
        }
    }

    private static class cp56time2a {

        static byte[] toByte(Calendar date) {
            short sec = (short) date.get(Calendar.SECOND);
            short mil = (short) date.get(Calendar.MILLISECOND);
            short msec = (short) (sec * 1000 + mil);
            byte min = (byte) date.get(Calendar.MINUTE);
            byte hour = (byte) date.get(Calendar.HOUR_OF_DAY);
            ;
            byte day_m = (byte) date.get(Calendar.DAY_OF_MONTH);
            byte day_w = (byte) (date.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY ? 7 : date.get(Calendar.DAY_OF_WEEK));
            byte month = (byte) (date.get(Calendar.MONTH) + 1);
            byte year = (byte) (date.get(Calendar.YEAR) - 2000);
            byte[] time = new byte[7];
            time[0] = (byte) (msec & 0xFF);
            time[1] = (byte) ((msec >> 8) & 0xFF);
            time[2] = (byte) (min & 0x3F);
            time[3] = (byte) (hour & 0x1F);
            time[4] = (byte) ((day_m & 0x1F) | (day_w << 5));
            time[5] = month;
            time[6] = year;
            return time;
        }

        static Calendar toDate(byte[] buf) {
            if (buf == null || buf.length < 7) {
                return null;
            }
            Calendar date = Calendar.getInstance();
            date.set(ProtocolUtils.Unsignd(buf[6]) + 2000, ProtocolUtils.Unsignd(buf[5]), ProtocolUtils.Unsignd((byte) (buf[4] & 0x1F)),
                     ProtocolUtils.Unsignd((byte) (buf[3] & 0x1F)), ProtocolUtils.Unsignd((byte) (buf[2] & 0x3F)), ProtocolUtils.byteToShort(buf[1], buf[1]) / 1000);
            return date;
        }
    }

    private class TYPE1 {

        byte spi = 0;

        TYPE1(byte data, int infoaddr) {
            spi = (byte) (data & 0x01);

        }
    }

    private class TYPE11 {

        byte qds = 0;
        int  value;

        TYPE11(byte[] data, int from, int addr) {
            value = ProtocolUtils.byteToShort(data[from + 1], data[from]);
            qds = (byte) data[from + 2];
        }
    }

    private class TYPE15 {

        boolean bInValid = false;
        int     value;

        TYPE15(byte[] data, int from, int addr) {
            value = ProtocolUtils.byteToShort(data[from + 1], data[from]) + ProtocolUtils.byteToShort(data[from + 3], data[from + 2]) * 0x10000;
            bInValid = (data[from + 4] & 0x80) == 0 ? false : true;
        }
    }

    private class TYPE132 {

        byte   qds = 0;
        byte[] value;
        int    len = 0;

        TYPE132(byte[] data, int from, int addr) {
            len = ProtocolUtils.Unsignd(data[from]);
            value = new byte[len];
            System.arraycopy(data, from + 1, value, 0, len);
            qds = (byte) data[from + 1 + len];
        }
    }

    private class TYPE134 {

        int       len = 0;
        int       type;
        BizUpBase value;

        TYPE134(byte[] data, int from, int addr) {
            type = ProtocolUtils.Unsignd(data[from]);
            switch (type) {
                case 1:
                    value = new BizACPileMonitor(data, from + 1);
                    break;
                case 2:
                    value = new BizDCPileMonitor(data, from + 1);
                    break;
            }
            if (value != null) {
                len += value.len;
            }
        }
    }

    private class TYPE130 {

        int       len = 0;
        int       type;
        BizUpBase value;

        TYPE130(byte[] data, int from, int addr) {
            type = ProtocolUtils.Unsignd(data[from]);
            switch (type) {
                case BizTypeUp.ReqFeeModel:
                    value = new BizUpReqFeeModel(data, from + 1);
                    break;
                case BizTypeUp.ResultFeeModel:
                    value = new BizUpResultFeeModel(data, from + 1);
                    break;
                case BizTypeUp.OpenTimeResult:
                    value = new BizUpOpenTimeResult(data, from + 1);
                    break;
                case BizTypeUp.AuthWithoutCard:
                    value = new BizUpAuthWithoutCard(data, from + 1);
                    break;
                case BizTypeUp.AuthWithoutCardVeriCode:
                    value = new BizUpAuthWithoutCardVeriCode(data, from + 1);
                    break;
                case BizTypeUp.AuthWithIDCard:
                    value = new BizUpAuthWithIDCard(data, from + 1);
                    break;
                case BizTypeUp.AppointmentLock:
                    value = new BizUpAppointmentLock(data, from + 1);
                    break;
                case BizTypeUp.AppointmentCancel:
                    value = new BizUpAppointmentCancel(data, from + 1);
                    break;
                case BizTypeUp.RemoteStartResult:
                    value = new BizUpRemoteStartResult(data, from + 1);
                    break;
                case BizTypeUp.ChargeEventStart:
                    value = new BizUpChargeEventStart(data, from + 1);
                    break;
                case BizTypeUp.RemoteStopResult:
                    value = new BizUpRemoteStopResult(data, from + 1);
                    break;
                case BizTypeUp.ChargeEventEnd:
                    value = new BizUpChargeEventEnd(data, from + 1);
                    break;
                case BizTypeUp.IDCardFrozenMoney:
                    value = new BizUpIDCardFrozenMoney(data, from + 1);
                    break;
                case BizTypeUp.MoneyLeftWarn:
                    value = new BizUpMoneyLeftWarn(data, from + 1);
                    break;
                case BizTypeUp.ChargeRec:
                    value = new BizUpChargeRec(data, from + 1);
                    break;
                case BizTypeUp.PileAttachInfo:
                    value = new BizUpPileAttachInfo(data, from + 1);
                    break;
                case BizTypeUp.ClosePileLockConfirm:
                    value = new BizUpClosePileLockConfirm(data, from + 1);
                    break;
                case BizTypeUp.PileLockFailed:
                    value = new BizUpPileLockFailed(data, from + 1);
                    break;
                case BizTypeUp.PileInfoResult:
                    value = new BizUpPileInfoResult(data, from + 1);
                    break;
                case BizTypeUp.SoftUpdateAbstract:
                    value = new BizUpSoftUpdateAbstract(data, from + 1);
                    break;
                case BizTypeUp.SoftUpdateFileReq:
                    value = new BizUpSoftUpdateFileReq(data, from + 1);
                    break;
                case BizTypeUp.SoftUpdateConfirm:
                    value = new BizUpSoftUpdateConfirm(data, from + 1);
                    break;
                case BizTypeUp.CallCountDataResult:
                    value = new BizUpCallCountDataResult(data, from + 1);
                    break;
                case BizTypeUp.CallBizDataResult:
                    value = new BizUpCallBizDataResult(data, from + 1);
                    break;
            }
            if (value != null) {
                len += value.len;
            }
        }
    }

    private class TYPE133 {

        int         type;
        BizDownBase value;

        public TYPE133(PileService pileService, int bizType) {
            type = bizType;
            switch (bizType) {
                case BizTypeDown.FeeModel:
                    value = new BizDownFeeModel(pileService);
                    break;
                case BizTypeDown.OpenTime:
                    value = new BizDownOpenTime(pileService);
                    break;
                case BizTypeDown.AuthWithoutCard:
                    value = new BizDownAuthWithoutCard(pileService);
                    break;
                case BizTypeDown.AuthWithIDCard:
                    value = new BizDownAuthWithIDCard(pileService);
                    break;
                case BizTypeDown.AppointmentLock:
                    value = new BizDownAppointmentLock(pileService);
                    break;
                case BizTypeDown.AppointmentUpConfirm:
                    value = new BizDownAppointmentUpConfirm(pileService);
                    break;
                case BizTypeDown.AppointmentCancel:
                    value = new BizDownAppointmentCancel(pileService);
                    break;
                case BizTypeDown.RemoteStart:
                    value = new BizDownRemoteStart(pileService);
                    break;
                case BizTypeDown.ChargeEventStart:
                    value = new BizDownChargeEventStart(pileService);
                    break;
                case BizTypeDown.RemoteStop:
                    value = new BizDownRemoteStop(pileService);
                    break;
                case BizTypeDown.IDCardFrozenMoney:
                    value = new BizDownIDCardFrozenMoney(pileService);
                    break;
                case BizTypeDown.ChargeConfirm:
                    value = new BizDownChargeConfirm(pileService);
                    break;
                case BizTypeDown.CallPile:
                    value = new BizDownCallPile(pileService);
                    break;
                case BizTypeDown.CloseParkLock:
                    value = new BizDownCloseParkLock(pileService);
                    break;
                case BizTypeDown.ClosePileLock:
                    value = new BizDownCloseParkLock(pileService);
                    break;
                case BizTypeDown.PileInfo:
                    value = new BizDownPileInfo(pileService);
                    break;
                case BizTypeDown.SoftUpdateReq:
                    value = new BizDownSoftUpdateReq(pileService);
                    break;
                case BizTypeDown.SoftUpdateAbstractResult:
                    value = new BizDownSoftUpdateAbstractResult(pileService);
                    break;
                case BizTypeDown.SoftUpdateFile:
                    value = new BizDownSoftUpdateFile(pileService);
                    break;
                case BizTypeDown.UpdateIP:
                    value = new BizDownUpdateIP(pileService);
                    break;
                case BizTypeDown.CallCountData:
                    value = new BizDownCallCountData(pileService);
                    break;
                case BizTypeDown.CallBizData:
                    value = new BizDownCallBizData(pileService);
                    break;
                default:
                    break;
            }
        }
    }

    private abstract class BizDownBase {

        String devcode;
        int    chargeInterface = 0;

        public BizDownBase(PileService pileService) {
            devcode = pileService.getPile().getComAddr();
            if (pileService.getPile().getComSubAddr() != null) {
                chargeInterface = Integer.parseInt(pileService.getPile().getComSubAddr());
            }
        }

        public abstract byte[] toByte();
    }

    private class BizDownFeeModel extends BizDownBase {

        String   feeModelId    = "1122334455667788";
        Calendar startTime;
        Calendar endTime;
        String   performStatus = "0001";
        String   metType       = "0001";
        int      periodNum     = 2;

        int[]    periodStart   = { 0, 12 };
        int[]    periodType    = { 4, 2 };
        double   jianPrice     = 10.00001;          // 尖单价
        double   peakPrice     = 10.00002;
        double   flatPrice     = 10.00003;
        double   valleyPrice   = 10.00004;
        double   chargePrice   = 10.00005;          // 充电服务费单价
        double   bookPrice     = 10.00006;          // 预约费单价
        double   parkPrice     = 10.00007;          // 停车费单价

        public BizDownFeeModel(PileService pileService) {
            super(pileService);
            startTime = Calendar.getInstance();
            endTime = Calendar.getInstance();
            // endTime = Calendar.getInstance();
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-M-d H:m:s");
            // 指定一个日期
            Date date;
            try {
                date = dateFormat.parse("2013-6-1 13:24:16");
                startTime.setTime(date);
                endTime.setTime(date);
                endTime.add(5, Calendar.DAY_OF_MONTH);
                System.out.println("STARTTIME:" + startTime.getTime());
                System.out.println("ENDTIME:" + endTime.getTime());
            } catch (ParseException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }

    }

    private class BizDownOpenTime extends BizDownBase {

        String   timeStampNo  = "312013051412010159";
        int      blackListNum = 4;
        String[] cardNo       = { "1122334455667788", "0022334455667788", "1100334455667788", "1122004455667788" };
        int[]    cardStatus   = { 1, 2, 1, 2 };

        public BizDownOpenTime(PileService pileService) {
            super(pileService);

        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    // 无卡用户名密码鉴权下行数据
    private class BizDownAuthWithoutCard extends BizDownBase {

        int    veriFlag  = 0;
        int    failInfo  = 0;
        /*
         * 0001 密码不对 0002 余额不足 0003 套餐余额不足 0004 非法用户 0005 挂失卡 0006 车卡不匹配 0008 有未支付记录
         */
        // 账号余额
        double leftMoney = 100.10;
        String userid;            // phone number
        int    userType  = 0;
        String password;
        String CPUCard;

        public BizDownAuthWithoutCard(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }

    }

    private class BizDownAuthWithIDCard extends BizDownBase {

        public BizDownAuthWithIDCard(PileService pileService) {
            super(pileService);
        }

        String cardNoIn    = ""; // 长度不够,用 0x00 在尾部补齐
        String cardNoOut   = ""; // 长度不够用 0x00 补齐
        int    cardStatus;      // 1:正常；2：挂失
        double frozenMoney = 0;
        double leftMoney   = 0; // 账号余额
        int    veriFlag    = 0; // 1：成功；0：失败
        int    failInfo    = 0;

        /*
         * 0001 密码不对 0002 余额不足 0003 套餐余额不足 0004 非法用户 0005 挂失卡 0006 车卡不匹配 0008 有未支付记录
         */

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }

    }

    private class BizDownAppointmentLock extends BizDownBase {

        int    appointFlag = 0; // 0预约，1续约
        Date   beginTime;
        int    keepTimes;      // 预约时长，单位分钟
        String userID;         // 预约账号，手机号码
        String cardID;         // 预约卡号
        String appointID;      // 预约号
        String carID;          // 车牌号

        public BizDownAppointmentLock(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownAppointmentUpConfirm extends BizDownBase {

        String appointID;      // 预约号
        int    appointFlag = 0; // 0预约，1续约
        int    result;         // 处理结果 4 桩编号不存在 3:已经处理 2:数据不存在 1:处理成功

        public BizDownAppointmentUpConfirm(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownAppointmentCancel extends BizDownBase {

        String appointID; // 预约号

        public BizDownAppointmentCancel(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownRemoteStart extends BizDownBase {

        String userID;        // 预约账号，手机号码
        double leftMoney  = 0; // 账号余额
        double minMoney;      // 最小充电金额
        int    chargeType = 1; // 1：二维码充电; 2: 用户名密码鉴权充电 3：卡充电
        int    feeMode    = 1; // 1:预冻结 2:后付费
        double preMoney   = 0; // 预充金额
        String password;      // 密码
        String tradeNo;       // 充电流水号号

        int    veriFlag   = 0; // 1：成功；0：失败

        public BizDownRemoteStart(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownChargeEventStart extends BizDownBase {

        String tradeNo; // 充电流水号号
        int    result; // 1：处理成功 2：已经处理 3：不存在

        public BizDownChargeEventStart(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownRemoteStop extends BizDownBase {

        public BizDownRemoteStop(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownIDCardFrozenMoney extends BizDownBase {

        String cardIDIn;
        int    isSuccess; // 1：成功，0：失败
        int    errorInfo; // 当字段 4 等于 0 有效 1：金额不足 2：没找到桩 3：无效卡 4：在其他桩上使用，不能充电

        public BizDownIDCardFrozenMoney(PileService pileService) {
            super(pileService);
        }

        String keyData;

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownChargeConfirm extends BizDownBase {

        String tradeNo; // 充电流水号号
        int    result; // 3:已经处理 2:数据不存在 1:处理成功

        public BizDownChargeConfirm(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownCallPile extends BizDownBase {

        int operateType; // 1:启;0:停
        int callType;   // 1:LED 灯; 2:声音;
        int times;      // 秒

        public BizDownCallPile(PileService pileService) {
            super(pileService);
        }

        String   powerParame = "0010";
        Calendar endTime;

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownCloseParkLock extends BizDownBase {

        public BizDownCloseParkLock(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }

    }

    private class BizDownClosePileLock extends BizDownBase {

        double preMoney;

        public BizDownClosePileLock(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }

    }

    private class BizDownPileInfo extends BizDownBase {

        int stationAddr;

        public BizDownPileInfo(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownSoftUpdateReq extends BizDownBase {

        int    stationAddr;
        String hardModel;
        int    mainVer;
        int    subVer;

        public BizDownSoftUpdateReq(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownSoftUpdateAbstractResult extends BizDownBase {

        int    stationAddr;
        int    updateFlag;
        String hardModel;
        int    mainVer;
        int    subVer;
        String firmwareName;
        int    mainVer_frimware;
        int    subVer_frimware;
        int    compareVer;
        int    fileExist;       // 1:文件存在 0:文件不存在
        int    fileSize;
        int    sectNum;
        String md5;

        public BizDownSoftUpdateAbstractResult(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownSoftUpdateFile extends BizDownBase {

        int    stationAddr;
        int    updateFlag;
        String firmwareName;
        int    mainVer_frimware;
        int    subVer_frimware;
        int    compareVer;
        int    sectIndex;
        int    isSuccess;       // 0：请求段索引不在文件段范围内 1：成功
        String md5;
        int    sectSize;
        byte[] sectData;

        public BizDownSoftUpdateFile(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }
    }

    private class BizDownUpdateIP extends BizDownBase {

        int ip_sec1;
        int ip_sec2;
        int ip_sec3;
        int ip_sec4;
        int ip_sec5;
        int ip_sec6;
        int port;

        public BizDownUpdateIP(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }

    }

    private class BizDownCallCountData extends BizDownBase {

        public BizDownCallCountData(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }

    }

    private class BizDownCallBizData extends BizDownBase {

        public BizDownCallBizData(PileService pileService) {
            super(pileService);
        }

        @Override
        public byte[] toByte() {
            // TODO Auto-generated method stub
            return null;
        }

    }

    // --------------

    private class BizUpBase {

        String devcode;
        int    chargeInterface;
        int    len = 0;

        BizUpBase(byte[] data, int from) {
            devcode = ProtocolUtils.getByteToHexStringDesc(data, from, 8, "");
            chargeInterface = ProtocolUtils.Unsignd(data[from + 8]);
            len = 9;
        }

        BizUpBase(byte[] data, int from, boolean noInterface) {
            devcode = ProtocolUtils.getByteToHexStringDesc(data, from, 8, "");
            chargeInterface = 0;
            len = 8;
        }
    }

    private class BizUpReqFeeModel extends BizUpBase {

        BizUpReqFeeModel(byte[] data, int from) {
            super(data, from, true);
        }

    }

    private class BizUpResultFeeModel extends BizUpBase {

        String feeModelId;
        int    isSuccess;
        int    errorCode;

        BizUpResultFeeModel(byte[] data, int from) {
            super(data, from);
            int index = from + len;
            feeModelId = ProtocolUtils.getByteToHexStringDesc(data, index, 8, "");
            index += 8;
            isSuccess = ProtocolUtils.Unsignd(data[index++]);
            errorCode = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
        }

    }

    private class BizUpOpenTimeResult extends BizUpBase {

        int type;     // 0:离线;1:运营
        int isSuccess; // 0:成功，其它失败

        BizUpOpenTimeResult(byte[] data, int from) {
            super(data, from, true);
            int index = from + len;
            type = ProtocolUtils.Unsignd(data[index++]);
            isSuccess = ProtocolUtils.Unsignd(data[index++]);
        }

    }

    private class BizUpAuthWithoutCard extends BizUpBase {

        String userid;  // phone number
        String password;

        BizUpAuthWithoutCard(byte[] data, int from) {
            super(data, from);
            int index = from + len;

            userid = ProtocolUtils.getByteToHexStringDesc(data, index, 6, "");
            index += 6;
            password = ProtocolUtils.getByteToHexStringDesc(data, index, 32, "");
        }

    }

    private class BizUpAuthWithoutCardVeriCode extends BizUpBase {

        String veriCode;

        BizUpAuthWithoutCardVeriCode(byte[] data, int from) {
            super(data, from);
            int index = from + len;

            veriCode = ProtocolUtils.getByteToHexStringDesc(data, index, 8, "");
        }

    }

    private class BizUpAuthWithIDCard extends BizUpBase {

        String cardNo;
        String cardPass;
        int    cardType;

        BizUpAuthWithIDCard(byte[] data, int from) {
            super(data, from);
            int index = from + len;

            cardNo = ProtocolUtils.getByteToHexStringDesc(data, index, 32, "");
            index += 32;

            cardPass = ProtocolUtils.getByteToHexStringDesc(data, index, 32, "");
            index += 32;

            cardType = ProtocolUtils.Unsignd(data[index++]);
        }
    }

    private class BizUpAppointmentLock extends BizUpBase {

        int    appointFlag = 0; // 0预约，1续约
        int    result;         // 1:表示成功 0：其它表示失败
        int    errorInfo;
        String appointID;      // 预约号

        BizUpAppointmentLock(byte[] data, int from) {
            super(data, from);
            int index = from + len;
            appointFlag = ProtocolUtils.Unsignd(data[index++]);
            appointID = ProtocolUtils.getByteToHexStringDesc(data, index, 6, "");
            index += 6;
            result = ProtocolUtils.Unsignd(data[index++]);
            errorInfo = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
        }

    }

    private class BizUpAppointmentCancel extends BizUpBase {

        String   userID;   // 预约账号，手机号码,把预约下行锁定的账号上报
        int      flag = 0; // 0:标识电桩接受了运营系统的指令 1:标识解锁，下面的预约号为明文预约号(此时的预约号不再有保密性)，用 0x00 补起剩余位
        String   appointID; // 预约号
        int      result;   // 1:表示取消预约成功
        Calendar time;
        int      errorInfo;

        BizUpAppointmentCancel(byte[] data, int from) {
            super(data, from);
            int index = from + len;
            userID = ProtocolUtils.getByteToHexStringDesc(data, index, 6, "");
            index += 6;
            flag = ProtocolUtils.Unsignd(data[index++]);
            appointID = ProtocolUtils.getByteToHexStringDesc(data, index, 6, "");
            index += 6;
            result = ProtocolUtils.Unsignd(data[index++]);
            time = cp56time2a.toDate(Arrays.copyOfRange(data, index, index + 7));
            index += 7;
            errorInfo = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
        }

    }

    private class BizUpRemoteStartResult extends BizUpBase {

        int    isSuccess; // 1成功，其他失败
        double preMoney;
        int    errorInfo;

        BizUpRemoteStartResult(byte[] data, int from) {
            super(data, from);
            int index = from + len;

            isSuccess = ProtocolUtils.Unsignd(data[index++]);
            preMoney = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
            errorInfo = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
        }

    }

    private class BizUpChargeEventStart extends BizUpBase {

        String   tradeNo;    // 充电流水号号 ：终端机器编码 16+序列号 16
        double   energyBegin;
        Calendar timeBegin;
        int      leftTime;   // 直流有效,交流数据为 0
        int      flag;       // 1:成功充电;0:失败 0:放弃（未插枪超时等
        int      errorInfo;

        BizUpChargeEventStart(byte[] data, int from) {
            super(data, from);
            int index = from + len;
            tradeNo = ProtocolUtils.getByteToHexStringDesc(data, index, 16, "");
            index += 16;
            energyBegin = ProtocolUtils.byteToInteger(data, index) * 0.001;
            index += 4;
            timeBegin = cp56time2a.toDate(Arrays.copyOfRange(data, index, index + 7));
            index += 7;
            leftTime = ProtocolUtils.byteToInteger(data, index);
            index += 4;
            flag = ProtocolUtils.Unsignd(data[index++]);
            errorInfo = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
        }

    }

    private class BizUpRemoteStopResult extends BizUpBase {

        int isSuccess; // 0 成功; 其它失败

        BizUpRemoteStopResult(byte[] data, int from) {
            super(data, from);
            int index = from + len;

            isSuccess = ProtocolUtils.Unsignd(data[index]);
        }

    }

    private class BizUpChargeEventEnd extends BizUpBase {

        String   tradeNo;   // 充电流水号号 ：终端机器编码 16+序列号 16
        double   energyEnd;
        Calendar timeEnd;
        int      endCause;
        /*
         * 1：正常结束 2：用户强制结束 3：急停 4：连接线断掉 5: 电表异常 6：过流停止 7：过压停止 8：防雷器故障 9：接触器故障 10:余额不足 11:漏电保护器 12:自动完成 13:BMS 通信异常故障
         * 14:违规拔枪 15::电桩断电 21.用户 app 上停止充电 22.二维码方式充电桩上结束充电 23.用户名密码用户输入密码结束充电 24.验证码方式 用户输入验证码结束充电
         * 25.充电桩检测汽车充电充满信号结束充电 26.按时间充时间达到设定值 27.按电量充电量达到设定值 28.按金额充金额达到设定值 29.自动充满方式: 30.第 5 点充电桩检测汽车充电充满信号结束充电
         * 31.电流小于 1A 超过规定时间(1 分钟和 10 分钟)结束充电
         */
        int      endType;
        int      onlineFlag; // 1：在线， 0:离线，用于卡停止充电或者本 地鉴权，断网情况下的停止充电
        int      isSuccess;

        BizUpChargeEventEnd(byte[] data, int from) {
            super(data, from);
            int index = from + len;

            energyEnd = ProtocolUtils.byteToInteger(data, index) * 0.001;
            index += 4;
            tradeNo = ProtocolUtils.getByteToHexStringDesc(data, index, 16, "");
            index += 16;
            timeEnd = cp56time2a.toDate(Arrays.copyOfRange(data, index, index + 7));
            index += 7;
            endCause = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            endType = ProtocolUtils.Unsignd(data[index++]);
            endType = ProtocolUtils.Unsignd(data[index++]);
            onlineFlag = ProtocolUtils.Unsignd(data[index++]);
            isSuccess = ProtocolUtils.Unsignd(data[index]);
        }

    }

    private class BizUpIDCardFrozenMoney extends BizUpBase {

        String cardIDIn;
        double frozenMoney;

        BizUpIDCardFrozenMoney(byte[] data, int from) {
            super(data, from);
            int index = from + len;

            cardIDIn = ProtocolUtils.getByteToHexStringDesc(data, index, 32, "");
            index += 32;
            frozenMoney = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
        }

    }

    private class BizUpMoneyLeftWarn extends BizUpBase {

        String userID;
        double leftMoney;
        double warnMoney;

        BizUpMoneyLeftWarn(byte[] data, int from) {
            super(data, from);
            int index = from + len;

            userID = ProtocolUtils.getByteToHexStringDesc(data, index, 6, "");
            index += 6;
            leftMoney = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
            warnMoney = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
        }

    }

    private class BizUpChargeRec extends BizUpBase {

        String   tradeNo;
        int      userType;     // 1：帐号 2：普通卡 3：特殊卡
        int      userFrom;     // 1:FOXCONN 5:北京出行
        String   userID;       // 当userType 等于帐号时，这儿是账户 BCD 码 当 这 儿 是 卡 时，这儿是内 卡号的 ASCII 码
        int      isOffline;    // 0:离线 1:在线
        Calendar startTime;
        Calendar endTime;
        double   jianElec;     // 尖电量
        double   jianMoney;    // 尖金额
        double   peakMoney;
        double   peakElec;
        double   flatElec;
        double   flatMoney;
        double   valleyElec;
        double   valleyMoney;
        double   totalElec;    // 总电量
        double   energyMoney;  // 总电量金额
        double   serviceMoney; // 服务费金额
        double   totalBegValue; // 总起示值
        double   totalEndValue;
        int      endCause;

        BizUpChargeRec(byte[] data, int from) {
            super(data, from);
            int index = from + len;
            tradeNo = ProtocolUtils.getByteToHexStringDesc(data, index, 16, "");
            index += 16;
            userType = ProtocolUtils.Unsignd(data[index++]);
            userFrom = ProtocolUtils.Unsignd(data[index++]);
            userID = ProtocolUtils.getByteToHexStringDesc(data, index, 6, "");
            index += 6;
            isOffline = ProtocolUtils.Unsignd(data[index++]);
            startTime = cp56time2a.toDate(Arrays.copyOfRange(data, index, index + 7));
            index += 7;
            endTime = cp56time2a.toDate(Arrays.copyOfRange(data, index, index + 7));
            index += 7;
            jianElec = ProtocolUtils.byteToInteger(data, index) * 0.001;
            index += 4;
            jianMoney = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
            peakElec = ProtocolUtils.byteToInteger(data, index) * 0.001;
            index += 4;
            peakMoney = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
            flatElec = ProtocolUtils.byteToInteger(data, index) * 0.001;
            index += 4;
            flatMoney = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
            valleyElec = ProtocolUtils.byteToInteger(data, index) * 0.001;
            index += 4;
            valleyMoney = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
            totalElec = ProtocolUtils.byteToInteger(data, index) * 0.001;
            index += 4;
            energyMoney = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
            serviceMoney = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
            totalBegValue = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
            totalEndValue = ProtocolUtils.byteToInteger(data, index) * 0.01;
            index += 4;
            endCause = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
        }
    }

    private class BizUpPileAttachInfo extends BizUpBase {

        int              pileNum;
        List<AttachInfo> list = new ArrayList<AttachInfo>(); ;

        BizUpPileAttachInfo(byte[] data, int from) {
            super(data, from, true);
            int index = from + len;
            pileNum = ProtocolUtils.Unsignd(data[index++]);
            for (int i = 0; i < pileNum; i++) {
                AttachInfo info = new AttachInfo();
                info.pileLock = ProtocolUtils.Unsignd(data[index++]);
                info.pileBase = ProtocolUtils.Unsignd(data[index++]);
                info.bms = ProtocolUtils.Unsignd(data[index++]);
                info.carPark = ProtocolUtils.Unsignd(data[index++]);
                info.led = ProtocolUtils.Unsignd(data[index++]);
                list.add(info);
            }
        }

        private class AttachInfo {

            int pileLock;
            int pileBase;
            int bms;
            int carPark;
            int led;
        }
    }

    private class BizUpClosePileLockConfirm extends BizUpBase {

        int result;    // 1 成功；0：失 败
        int pileStatus; // 1：打开；0：未 打开

        BizUpClosePileLockConfirm(byte[] data, int from) {
            super(data, from);
            int index = from + len;
            result = ProtocolUtils.Unsignd(data[index++]);
            pileStatus = ProtocolUtils.Unsignd(data[index++]);
        }

    }

    private class BizUpPileLockFailed extends BizUpBase {

        int failedInfo;

        BizUpPileLockFailed(byte[] data, int from) {
            super(data, from);
            int index = from + len;
            failedInfo = ProtocolUtils.Unsignd(data[index++]);
        }
    }

    private class BizUpPileInfoResult extends BizUpBase {

        int            stationAddr;
        String         model;
        int            hardNum;
        List<HardInfo> list = new ArrayList<HardInfo>(); ;

        BizUpPileInfoResult(byte[] data, int from) {
            super(data, from, true);
            int index = from + len;
            stationAddr = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            model = new String(data, index, 20);
            index += 20;
            hardNum = ProtocolUtils.Unsignd(data[index++]);
            for (int i = 0; i < hardNum; i++) {
                HardInfo info = new HardInfo();
                model = new String(data, index, 10);
                index += 10;
                info.mainVer = ProtocolUtils.Unsignd(data[index++]);
                info.subVer = ProtocolUtils.Unsignd(data[index++]);
                info.firmwareName = new String(data, index, 8);
                index += 8;
                info.mainVer_frimware = ProtocolUtils.Unsignd(data[index++]);
                info.subVer_frimware = ProtocolUtils.Unsignd(data[index++]);
                info.compareVer = ProtocolUtils.byteToShort(data[index + 1], data[index]);
                index += 2;
                list.add(info);
            }
        }

        private class HardInfo {

            String model;
            int    mainVer;
            int    subVer;
            String firmwareName;
            int    mainVer_frimware;
            int    subVer_frimware;
            int    compareVer;
        }

    }

    private class BizUpSoftUpdateAbstract extends BizUpBase {

        int    stationAddr;
        String hardModel;
        int    mainVer;
        int    subVer;
        int    size;

        BizUpSoftUpdateAbstract(byte[] data, int from) {
            super(data, from, true);
            int index = from + len;
            stationAddr = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            hardModel = new String(data, index, 10);
            index += 10;
            mainVer = ProtocolUtils.Unsignd(data[index++]);
            subVer = ProtocolUtils.Unsignd(data[index++]);
            size = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
        }

    }

    private class BizUpSoftUpdateFileReq extends BizUpBase {

        int    stationAddr;
        String hardModel;
        int    mainVer;
        int    subVer;
        String firmwareName;
        int    mainVer_frimware;
        int    subVer_frimware;
        int    compareVer;
        int    isSuccess;

        BizUpSoftUpdateFileReq(byte[] data, int from) {
            super(data, from, true);
            int index = from + len;
            stationAddr = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            hardModel = new String(data, index, 10);
            index += 10;
            mainVer = ProtocolUtils.Unsignd(data[index++]);
            subVer = ProtocolUtils.Unsignd(data[index++]);
            firmwareName = new String(data, index, 8);
            index += 8;
            mainVer_frimware = ProtocolUtils.Unsignd(data[index++]);
            subVer_frimware = ProtocolUtils.Unsignd(data[index++]);
            compareVer = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            isSuccess = ProtocolUtils.Unsignd(data[index++]);
        }

    }

    private class BizUpSoftUpdateConfirm extends BizUpBase {

        int    stationAddr;
        String firmwareName;
        int    mainVer_frimware;
        int    subVer_frimware;
        int    compareVer;
        int    sectIndex;
        int    sectSize;

        BizUpSoftUpdateConfirm(byte[] data, int from) {
            super(data, from, true);
            int index = from + len;
            stationAddr = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            firmwareName = new String(data, index, 8);
            index += 8;
            mainVer_frimware = ProtocolUtils.Unsignd(data[index++]);
            subVer_frimware = ProtocolUtils.Unsignd(data[index++]);
            compareVer = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            sectIndex = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            sectSize = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
        }

    }

    private class BizUpCallCountDataResult extends BizUpBase {

        int             pileNum;
        List<CountData> list = new ArrayList<CountData>();

        BizUpCallCountDataResult(byte[] data, int from) {
            super(data, from, true);
            int index = from + len;
            pileNum = ProtocolUtils.Unsignd(data[index++]);
            for (int i = 0; i < pileNum; i++) {
                CountData info = new CountData();
                info.totalChargeTimes = ProtocolUtils.byteToInteger(data, index);
                index += 4;
                info.totalChargeNum = ProtocolUtils.byteToInteger(data, index);
                index += 4;
                info.totalChargeEnergy = ProtocolUtils.byteToInteger(data, index) * 0.001;
                index += 4;
                list.add(info);
            }
        }

        private class CountData {

            int    totalChargeTimes;
            int    totalChargeNum;
            double totalChargeEnergy;
        }
    }

    private class BizUpCallBizDataResult extends BizUpBase {

        int isAppointment;    // 1：有数据：0：无数 据
        int unReportChargeNum;

        BizUpCallBizDataResult(byte[] data, int from) {
            super(data, from, true);
            int index = from + len;
            isAppointment = ProtocolUtils.Unsignd(data[index++]);
            unReportChargeNum = ProtocolUtils.Unsignd(data[index++]);
        }
    }

    private class BizDCPileMonitor extends BizUpBase {

        float   dcOutV;
        float   dcOutI;
        int     SOC;
        float   BatTempLow;     // 电池组最低温度
        float   BatTempHigh;
        int     totalTime;
        int     workstatus;
        boolean BmsError;
        boolean dcOutOver;      // 直流母线输出过压告警
        boolean dcOutLoss;
        boolean BatCurOver;     // 蓄电池充电过流告警
        boolean BatPntempOver;
        float   ygZong;         // 有功总电能
        boolean BatLinked;      // 是否连接电池
        float   BatSvHigh;      // 单体电池最高电压
        float   BatSvLow;       // 单体电池最低电压
        boolean plugBaseStatus; // 0:未收枪 1:收枪 壁挂式不需要此状态
        boolean plugCoverStatus; // 0:开;1:关闭 壁挂式不需要此状态
        boolean connectCar;     // 0:未建立通讯 1:建立通讯 没有填 0
        boolean parkBusy;       // 1：表示有车： 0：表示没车

        boolean recordOverflow; // 交 易 记 录 已满告警
        boolean cardReadError;  // 读 卡 器 通 讯异常
        boolean meterError;     // 电度表异常

        float   chargedMoney;   // 已充金额 精确到小数点后两位，倍数 100
        float   energyPrice;    // 电价 精确到小数点后两位， 倍数 100
        float   chargedEnergy;  // 已充总度数 精确到小数点后两位，倍数 100
        int     parkLockStatus; // 0：地锁硬件无法找到 1:降下 2:升起 3:运动中 4:故障

        int     len = 0;

        BizDCPileMonitor(byte[] data, int from) {
            super(data, from);
            int index = from + len;
            dcOutV = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.1);
            index += 2;
            dcOutI = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.01);
            index += 2;
            SOC = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            BatTempLow = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.1);
            index += 2;
            BatTempHigh = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.1);
            index += 2;
            totalTime = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            workstatus = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;
            BmsError = data[index] == 0 ? false : true;
            index += 1;
            dcOutOver = data[index] == 0 ? false : true;
            index += 1;
            dcOutLoss = data[index] == 0 ? false : true;
            index += 1;
            BatCurOver = data[index] == 0 ? false : true;
            index += 1;
            BatPntempOver = data[index] == 0 ? false : true;
            index += 1;
            ygZong = ProtocolUtils.byteToShort(data[index + 1], data[index]) + ProtocolUtils.byteToShort(data[index + 3], data[index + 2]) * 0x10000;
            ygZong *= 0.1;
            index += 4;
            BatLinked = data[index] == 0 ? false : true;
            index += 1;
            BatSvHigh = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.001);
            index += 2;
            BatSvLow = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.001);
            index += 2;
            plugBaseStatus = data[index++] == 0 ? false : true;
            plugCoverStatus = data[index++] == 0 ? false : true;
            connectCar = data[index++] == 0 ? false : true;
            parkBusy = data[index++] == 0 ? false : true;
            recordOverflow = data[index++] == 0 ? false : true;
            cardReadError = data[index++] == 0 ? false : true;
            meterError = data[index++] == 0 ? false : true;

            chargedMoney = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.1);
            index += 2;
            energyPrice = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.1);
            index += 2;
            chargedEnergy = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.1);
            index += 2;
            parkLockStatus = data[index++];
            len = index - from;
        }
    }

    private class BizACPileMonitor extends BizUpBase {

        boolean linkcon;
        int     workstatus;
        boolean plugBaseStatus; // 0:未收枪 1:收枪 壁挂式不需要此状态
        boolean plugCoverStatus; // 0:开;1:关闭 壁挂式不需要此状态
        boolean connectCar;     // 0:未建立通讯 1:建立通讯 没有填 0
        boolean acInOver;
        boolean acInLoss;
        boolean iOver;
        float   acOutV;
        float   acOutI;
        boolean relayOut;
        float   ygZong;
        int     totalTime;
        boolean parkBusy;       // 1：表示有车： 0：表示没车
        float   chargedMoney;   // 已充金额 精确到小数点后两位，倍数 100
        float   energyPrice;    // 电价 精确到小数点后两位， 倍数 100
        float   chargedEnergy;  // 已充总度数 精确到小数点后两位，倍数 100
        int     parkLockStatus; // 0：地锁硬件无法找到 1:降下 2:升起 3:运动中 4:故障

        int     len = 0;

        BizACPileMonitor(byte[] data, int from) {
            super(data, from);
            int index = from + len;
            linkcon = data[index++] == 0 ? false : true;
            workstatus = data[index++];
            plugBaseStatus = data[index++] == 0 ? false : true;
            plugCoverStatus = data[index++] == 0 ? false : true;
            connectCar = data[index++] == 0 ? false : true;

            acInOver = data[index++] == 0 ? false : true;
            acInLoss = data[index++] == 0 ? false : true;
            iOver = data[index++] == 0 ? false : true;
            acOutV = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.1);
            index += 2;
            acOutI = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.01);
            index += 2;
            relayOut = data[index++] == 0 ? false : true;
            ygZong = ProtocolUtils.byteToShort(data[index + 1], data[index]) + ProtocolUtils.byteToShort(data[index + 3], data[index + 2]) * 0x10000;
            ygZong *= 0.1;
            index += 5;
            totalTime = ProtocolUtils.byteToShort(data[index + 1], data[index]);
            index += 2;

            parkBusy = data[index++] == 0 ? false : true;

            chargedMoney = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.1);
            index += 2;
            energyPrice = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.1);
            index += 2;
            chargedEnergy = (float) (ProtocolUtils.byteToShort(data[index + 1], data[index]) * 0.1);
            index += 2;
            parkLockStatus = data[index++];

            len = index - from;
        }
    }

    private static class INFO_ADDR_AC {

        static int       ME            = 0;
        static int       SP            = 0;
        static int       MD            = 0;
        /** 信息体定义，请注意顺序不能变动，必须与协议一致 **/
        // static final int DEVCODE=MD++; //充电设备编号
        // static final int CHARGE_INTERFACE=SP++; //充电接口
        static final int LINKCON       = SP++; // 连接确认
        static final int WORKSTATUS    = ME++; // 工作状态
        static final int AC_IN_OVER    = SP++; // 交流输入过压状态
        static final int AC_IN_LOSS    = SP++; // 交流输入欠压状态
        static final int I_OVER        = SP++; // 充电电流过负荷告警
        static final int AC_OUT_V      = ME++; // 充电输出电压
        static final int AC_OUT_I      = ME++; // 充电输出电流
        static final int RELAY_OUT     = SP++; // 输出继电器状态
        static final int YG_ZONG       = MD++; // 有功总电能
        static final int TOTAL_TIME    = ME++; // 累计充电时间
        static final int LEFT_TIME     = ME++; // 预计剩余充电时间
        static final int VA_CUR        = ME++; // 当前A相电压
        static final int VB_CUR        = ME++; // 当前B相电压
        static final int VC_CUR        = ME++; // 当前C相电压
        static final int IA_CUR        = ME++; // 当前A相电流
        static final int IB_CUR        = ME++; // 当前B相电流
        static final int IC_CUR        = ME++; // 当前C相电流
        static final int PROTECT_TEMP  = SP++; // 温度过高保护
        static final int PROTECT_SHORT = SP++; // 短路保护
        static final int PROTECT_LEAK  = SP++; // 漏电保护
        static final int PROTECT_STOP  = SP++; // 急停开关触发

        static Integer getYCCode(int addrInfo) {
            if (addrInfo == WORKSTATUS) {
                return DataTypeEnum.YC_WORKSTATUS.getValue();
            } else if (addrInfo == AC_OUT_V) {
                return DataTypeEnum.YC_AC_OUT_V.getValue();
            } else if (addrInfo == AC_OUT_I) {
                return DataTypeEnum.YC_AC_OUT_I.getValue();
            } else if (addrInfo == TOTAL_TIME) {
                return DataTypeEnum.YC_TOTAL_TIME.getValue();
            } else if (addrInfo == LEFT_TIME) {
                return DataTypeEnum.YC_LEFT_TIME.getValue();
            } else if (addrInfo == VA_CUR) {
                return DataTypeEnum.YC_VA_CUR.getValue();
            } else if (addrInfo == VB_CUR) {
                return DataTypeEnum.YC_VB_CUR.getValue();
            } else if (addrInfo == VC_CUR) {
                return DataTypeEnum.YC_VC_CUR.getValue();
            } else if (addrInfo == IA_CUR) {
                return DataTypeEnum.YC_IA_CUR.getValue();
            } else if (addrInfo == IB_CUR) {
                return DataTypeEnum.YC_IB_CUR.getValue();
            } else if (addrInfo == IC_CUR) {
                return DataTypeEnum.YC_IC_CUR.getValue();
            } else {
                return null;
            }
        }

        static Integer getYXCode(int addrInfo) {
            if (addrInfo == LINKCON) {
                return DataTypeEnum.YX_LINKCON.getValue();
            } else if (addrInfo == AC_IN_OVER) {
                return DataTypeEnum.YX_AC_IN_OVER.getValue();
            } else if (addrInfo == AC_IN_LOSS) {
                return DataTypeEnum.YX_AC_IN_LOSS.getValue();
            } else if (addrInfo == I_OVER) {
                return DataTypeEnum.YX_I_OVER.getValue();
            } else if (addrInfo == RELAY_OUT) {
                return DataTypeEnum.YX_RELAY_OUT.getValue();
            } else if (addrInfo == PROTECT_TEMP) {
                return DataTypeEnum.YX_PROTECT_TEMP.getValue();
            } else if (addrInfo == PROTECT_SHORT) {
                return DataTypeEnum.YX_PROTECT_SHORT.getValue();
            } else if (addrInfo == PROTECT_LEAK) {
                return DataTypeEnum.YX_PROTECT_LEAK.getValue();
            } else if (addrInfo == PROTECT_STOP) {
                return DataTypeEnum.YX_PROTECT_STOP.getValue();
            } else {
                return null;
            }
        }

        static Integer getYACode(int addrInfo) {
            if (addrInfo == YG_ZONG) {
                return DataTypeEnum.YA_YG_ZONG.getValue();
            } else {
                return null;
            }
        }
    }

    private static class INFO_ADDR_DC {

        static int       ME              = 0;
        static int       SP              = 0;
        static int       MD              = 0;
        /** 信息体定义，请注意顺序不能变动，必须与协议一致 **/
        static final int OUT_V           = ME++; // 充电机输出电压
        static final int OUT_I           = ME++; // 充电机输出电流
        static final int IN_V            = ME++; // 充电机输入电压
        static final int SOC             = ME++; // SOC
        static final int BAT_TEMP_LOW    = ME++; // 电池组最低温度
        static final int BAT_TEMP_HIGH   = ME++; // 电池组最高温度
        static final int TOTAL_TIME      = ME++; // 累计充电时间
        static final int WORKSTATUS      = ME++; // 工作状态
        static final int BMS_ERROR       = SP++; // BMS通信异常
        static final int DC_OUT_OVER     = SP++; // 直流母线输出过压告警
        static final int DC_OUT_LOSS     = SP++; // 直流母线输出欠压告警
        static final int IN_OVER         = SP++; // 充电机输入过压告警
        static final int IN_LOSS         = SP++; // 充电机输入欠压告警
        static final int BAT_CUR_OVER    = SP++; // 蓄电池充电过流告警
        static final int BAT_PNTEMP_OVER = SP++; // 蓄电池模块采样点过温告警
        static final int YG_ZONG         = MD++; // 有功总电能
        static final int BAT_LINKED      = SP++; // 是否连接电池
        static final int BAT_SV_HIGH     = ME++; // 单体电池最高电压
        static final int BAT_SV_LOW      = ME++; // 单体电池最低电压
        static final int DEV_LINKED_ERR  = SP++; // 充电机连接器故障
        static final int BMS_LOSS        = SP++; // BMS终止
        static final int DEV_TEMP_ERROR  = SP++; // 充电机内部温度故障
        static final int PROTECT_TEMP    = SP++; // 温度过高保护
        static final int PROTECT_SHORT   = SP++; // 短路保护
        static final int PROTECT_LEAK    = SP++; // 漏电保护
        static final int PROTECT_STOP    = SP++; // 急停开关触发

        /****************************************/
        static Integer getYCCode(int addrInfo) {
            if (addrInfo == OUT_V) {
                return DataTypeEnum.YC_OUT_V.getValue();
            } else if (addrInfo == OUT_I) {
                return DataTypeEnum.YC_OUT_I.getValue();
            } else if (addrInfo == IN_V) {
                return DataTypeEnum.YC_IN_V.getValue();
            } else if (addrInfo == SOC) {
                return DataTypeEnum.YC_SOC.getValue();
            } else if (addrInfo == BAT_TEMP_LOW) {
                return DataTypeEnum.YC_BAT_TEMP_LOW.getValue();
            } else if (addrInfo == BAT_TEMP_HIGH) {
                return DataTypeEnum.YC_BAT_TEMP_HIGH.getValue();
            } else if (addrInfo == TOTAL_TIME) {
                return DataTypeEnum.YC_TOTAL_TIME.getValue();
            } else if (addrInfo == WORKSTATUS) {
                return DataTypeEnum.YC_WORKSTATUS.getValue();
            } else if (addrInfo == BAT_SV_HIGH) {
                return DataTypeEnum.YC_BAT_SV_HIGH.getValue();
            } else if (addrInfo == BAT_SV_LOW) {
                return DataTypeEnum.YC_BAT_SV_LOW.getValue();
            } else {
                return null;
            }
        }

        static Integer getYXCode(int addrInfo) {
            if (addrInfo == BMS_ERROR) {
                return DataTypeEnum.YX_BMS_ERROR.getValue();
            } else if (addrInfo == DC_OUT_OVER) {
                return DataTypeEnum.YX_DC_OUT_OVER.getValue();
            } else if (addrInfo == DC_OUT_LOSS) {
                return DataTypeEnum.YX_DC_OUT_LOSS.getValue();
            } else if (addrInfo == IN_OVER) {
                return DataTypeEnum.YX_AC_IN_OVER.getValue();
            } else if (addrInfo == IN_LOSS) {
                return DataTypeEnum.YX_AC_IN_LOSS.getValue();
            } else if (addrInfo == BAT_CUR_OVER) {
                return DataTypeEnum.YX_BAT_CUR_OVER.getValue();
            } else if (addrInfo == BAT_PNTEMP_OVER) {
                return DataTypeEnum.YX_BAT_PNTEMP_OVER.getValue();
            } else if (addrInfo == BAT_LINKED) {
                return DataTypeEnum.YX_BAT_LINKED.getValue();
            } else if (addrInfo == DEV_LINKED_ERR) {
                return DataTypeEnum.YX_DEV_LINKED_ERR.getValue();
            } else if (addrInfo == BMS_LOSS) {
                return DataTypeEnum.YX_BMS_LOSS.getValue();
            } else if (addrInfo == DEV_TEMP_ERROR) {
                return DataTypeEnum.YX_DEV_TEMP_ERROR.getValue();
            } else if (addrInfo == PROTECT_TEMP) {
                return DataTypeEnum.YX_PROTECT_TEMP.getValue();
            } else if (addrInfo == PROTECT_SHORT) {
                return DataTypeEnum.YX_PROTECT_SHORT.getValue();
            } else if (addrInfo == PROTECT_LEAK) {
                return DataTypeEnum.YX_PROTECT_LEAK.getValue();
            } else if (addrInfo == PROTECT_STOP) {
                return DataTypeEnum.YX_PROTECT_STOP.getValue();
            } else {
                return null;
            }
        }

        static Integer getYACode(int addrInfo) {
            if (addrInfo == YG_ZONG) {
                return DataTypeEnum.YA_YG_ZONG.getValue();
            } else {
                return null;
            }
        }

    }

    private class BizTypeUp {

        static final int ReqFeeModel             = 1;  // <1> 请求下发计费模型数据
        static final int ResultFeeModel          = 2;  // <5> 下发计费模型结果数据
        static final int OpenTimeResult          = 3;  // 下发充电桩运营时间上行数据
        static final int AuthWithoutCard         = 11; // 无卡用户名密码鉴权上行数据
        static final int AuthWithoutCardVeriCode = 12; // 无卡验证码鉴权上行数据
        static final int AuthWithIDCard          = 13; // 不圈存卡鉴权上行数据
        static final int AppointmentLock         = 31; // 预约锁定上行应答数据
        static final int AppointmentCancel       = 33; // 取消预约上行应答数据
        static final int RemoteStartResult       = 41; // 启动充电应答上行据
        static final int ChargeEventStart        = 42; // 充电开始事件上行数据
        static final int RemoteStopResult        = 43; // 用户停止充电应答上行数据
        static final int ChargeEventEnd          = 45; // 充电结束事件上行数据
        static final int IDCardFrozenMoney       = 44; // 不圈存卡充电冻结金额上行数据
        static final int MoneyLeftWarn           = 47; // 消费余额告警信息
        static final int ChargeRec               = 46; // 充电消费记录上行数据
        static final int PileAttachInfo          = 101; // 电桩设备支持报告上行数据
        static final int ClosePileLockConfirm    = 104; // 打开枪锁装置应答上行数据.
        static final int PileLockFailed          = 105; // 锁枪失败告警上行数据
        static final int PileInfoResult          = 141; // 产品信息查询
        static final int SoftUpdateAbstract      = 143; // 远端设备二进制程序文件下载概要信息请求
        static final int SoftUpdateFileReq       = 144; // 远端设备二进制程序文件分段下载请求
        static final int SoftUpdateConfirm       = 145; // 远端设备二进制程序文件更新确认应答
        static final int CallCountDataResult     = 161; // 充电信息统计上行数据
        static final int CallBizDataResult       = 162; // 电桩业务数据查询应答报文
    }

    private class BizTypeDown {

        static final int FeeModel                 = 1;  // <6> 下发计费模型下行数据
        static final int OpenTime                 = 3;  // 下发充电桩运营时间
        static final int AuthWithoutCard          = 11; // 无卡用户名密码鉴权下行数据
        static final int AuthWithIDCard           = 13; // 不圈存卡鉴权下行数据
        static final int AppointmentLock          = 31; // 预约锁定下行数据
        static final int AppointmentUpConfirm     = 32; // 电桩应答预约报文的确认
        static final int AppointmentCancel        = 33; // 取消预约下行数据
        static final int RemoteStart              = 41; // 启动充电下行数据
        static final int ChargeEventStart         = 42; // 充电开始事件的确认报文
        static final int RemoteStop               = 43; // 充电事件的确认报文
        // static final int ChargeEventEnd = 45; // 充电结束事件的确认报文
        static final int IDCardFrozenMoney        = 44; // 不圈存卡充电冻结金额下行数据
        static final int ChargeConfirm            = 46; // 消费记录确认下行数据
        static final int CallPile                 = 102; // 进场呼叫
        static final int CloseParkLock            = 103; // 降地锁
        static final int ClosePileLock            = 104; // 打开锁枪装置下行数据
        static final int PileInfo                 = 141; // 产品信息查询
        static final int SoftUpdateReq            = 142; // 强制更新远端设备软件下行数据
        static final int SoftUpdateAbstractResult = 143; // 远端设备二进制程序文件下载概要信息应答数据
        static final int SoftUpdateFile           = 144; // 远端设备二进制程序文件分段数据
        static final int UpdateIP                 = 146; // 更新充电桩后台服务器 IP 下行数据
        static final int CallCountData            = 161; // 充电信息统计下行数据
        static final int CallBizData              = 162; // 电桩业务数据查询

    }

    private void closeConnect(PileService pileService, ChannelService channel) {
        channel.closeChannel();
        pileService.unLinkChannel();
    }

    private List<DcsHisYc> getHisYc11(PileService pileService, ASDU asdu, PileStatusBean bean) {
        List<DcsHisYc> hisYcs = new ArrayList<DcsHisYc>();

        for (int i = 0; i < asdu.infoList.size(); i++) {
            DcsHisYc hisYc = new DcsHisYc();
            TYPE11 type_11 = (TYPE11) asdu.infoList.get(i).data;
            hisYc.setChargeid(pileService.getPile().getId());
            if (pileService.getPile().getChaWay().equals(ChargeCurrentTypeEnum.DC.getShortValue())) {
                hisYc.setDataType(INFO_ADDR_DC.getYCCode(asdu.infoList.get(i).addr));
                if (INFO_ADDR_DC.OUT_V == asdu.infoList.get(i).addr) {
                    bean.setOutv(String.valueOf(type_11.value));
                } else if (INFO_ADDR_DC.OUT_I == asdu.infoList.get(i).addr) {
                    bean.setOuti(String.valueOf(type_11.value));
                }
            } else {
                hisYc.setDataType(INFO_ADDR_AC.getYCCode(asdu.infoList.get(i).addr));
                if (INFO_ADDR_DC.OUT_V == asdu.infoList.get(i).addr) {
                    bean.setOutv(String.valueOf(type_11.value));
                } else if (INFO_ADDR_DC.OUT_I == asdu.infoList.get(i).addr) {
                    bean.setOuti(String.valueOf(type_11.value));
                }
            }
            hisYc.setDataTime(Calendar.getInstance().getTime());
            hisYc.setValue((int) type_11.value);
            hisYcs.add(hisYc);
        }
        return hisYcs;
    }

    private List<DcsHisYx> getHisYx(PileService pileService, ASDU asdu, PileStatusBean bean) {
        List<DcsHisYx> hisYxs = new ArrayList<DcsHisYx>();
        for (int i = 0; i < asdu.infoList.size(); i++) {
            DcsHisYx hisYx = new DcsHisYx();
            TYPE1 type_1 = (TYPE1) asdu.infoList.get(i).data;
            hisYx.setChargeid(pileService.getPile().getId());
            if (pileService.getPile().getChaWay().equals(ChargeCurrentTypeEnum.DC.getShortValue())) {
                hisYx.setDataType(INFO_ADDR_DC.getYXCode(asdu.infoList.get(i).addr));
            } else {
                hisYx.setDataType(INFO_ADDR_AC.getYXCode(asdu.infoList.get(i).addr));
            }
            hisYx.setDataTime(Calendar.getInstance().getTime());
            hisYx.setValue((int) type_1.spi);
            hisYxs.add(hisYx);
        }
        return hisYxs;
    }

    private int writeData(ChannelService channel, byte[] data) {
        W_104 = 0;
        return channel.writeData(data);
    }
}
